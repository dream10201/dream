[{"title":"Debian多网口桥接","date":"2022-11-05T02:12:00.000Z","path":"2022/11/05/f1abf9fa27e9/","text":"路由器只有两个lan口，我的小主机有四个网口，利用bridge-utils把其他网口桥接起来，当交换机用。 安装bridge-utils1apt install bridge-utils 编辑配置文件1vi /etc/network/interfacec 注释掉网口的配置，改成如下样子 12345source /etc/network/interfaces.d/*# The loopback network interfaceauto loiface lo inet loopback 添加桥接12touch /etc/network/interfaces.d/br0vi /etc/network/interfaces.d/br0 写入如下内容 1234auto br0iface br0 inet dhcp bridge_ports enp2s0 enp3s0 enp4s0 enp5s0 bridge_stp on 建立bridge后的状态是让网络接口eth0进入混杂模式（promiscuous mode，接收网络中所有数据包），网桥br0进入转发状态（forwarding state），而且br0和eth0有相同的MAC地址，一般也会得到和eth0相同的IP。“brctl stp br0 on”是打开br0的STP协议，STP是生成树协议（Spanning Tree Protocol），它主要是为了避免在建有bridge的以太网LAN中出现桥回路（bridge loop）。如果不打开STP，则可能出现回路从而导致建有bridge的主机网络不畅通。 重启网络 1systemctl restart networking.service","tags":[{"name":"bridge","slug":"bridge","permalink":"https://blog.bidd.net/tags/bridge/"}]},{"title":"MacOS开机自启","date":"2022-10-04T19:01:00.000Z","path":"2022/10/04/555afeda2546/","text":"MacOS设置开机自启 使用Launchctl命令1234//设置开机自启sudo launchctl load /path/service.plist//关闭开机自启sudo launchctl unload /path/service/plist 一般存放路径 &#x2F;Library&#x2F;LaunchDaemons&#x2F; 由管理员定义的守护进程任务项 &#x2F;Library&#x2F;LaunchAgents&#x2F; 由管理员为用户定义的任务项 ~&#x2F;Library&#x2F;LaunchAgents&#x2F; 由用户自己定义的任务项 &#x2F;System&#x2F;Library&#x2F;LaunchAgents 由Mac OS X为用户定义的任务项Agents文件夹下的plist是需要用户登录后，才会加载的，而Daemons文件夹下得plist是只要开机，可以不用登录就会被加载 示例plist123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;&lt;plist version=&quot;1.0&quot;&gt;&lt;dict&gt; &lt;key&gt;Label&lt;/key&gt; &lt;string&gt;dnsproxy&lt;/string&gt; &lt;key&gt;ProgramArguments&lt;/key&gt; &lt;array&gt; &lt;string&gt;/opt/bin/dnsproxy&lt;/string&gt; &lt;string&gt;-l&lt;/string&gt; &lt;string&gt;127.0.0.1&lt;/string&gt; &lt;string&gt;-p&lt;/string&gt; &lt;string&gt;53&lt;/string&gt; &lt;string&gt;-u&lt;/string&gt; &lt;string&gt;https://a.passcloud.xyz/sz&lt;/string&gt; &lt;string&gt;-u&lt;/string&gt; &lt;string&gt;https://a.passcloud.xyz/hk&lt;/string&gt; &lt;string&gt;-u&lt;/string&gt; &lt;string&gt;tls://c.passcloud.xyz:853&lt;/string&gt; &lt;string&gt;-u&lt;/string&gt; &lt;string&gt;https://sm2.doh.pub/dns-query&lt;/string&gt; &lt;string&gt;-u&lt;/string&gt; &lt;string&gt;223.5.5.5&lt;/string&gt; &lt;string&gt;-f&lt;/string&gt; &lt;string&gt;119.29.29.29&lt;/string&gt; &lt;string&gt;-f&lt;/string&gt; &lt;string&gt;223.5.5.5&lt;/string&gt; &lt;string&gt;--all-servers&lt;/string&gt; &lt;string&gt;--fastest-addr&lt;/string&gt; &lt;string&gt;--cache&lt;/string&gt; &lt;string&gt;--cache-size=4096&lt;/string&gt; &lt;string&gt;--cache-optimistic&lt;/string&gt; &lt;string&gt;-b&lt;/string&gt; &lt;string&gt;119.29.29.29&lt;/string&gt; &lt;string&gt;-b&lt;/string&gt; &lt;string&gt;223.5.5.5&lt;/string&gt; &lt;/array&gt; &lt;key&gt;KeepAlive&lt;/key&gt; &lt;true/&gt; &lt;key&gt;RunAtLoad&lt;/key&gt; &lt;true/&gt; &lt;key&gt;WorkingDirectory&lt;/key&gt; &lt;string&gt;/tmp&lt;/string&gt;&lt;/dict&gt;&lt;/plist&gt;","tags":[{"name":"MacOS","slug":"MacOS","permalink":"https://blog.bidd.net/tags/MacOS/"}]},{"title":"linux创建raid阵列","date":"2022-09-27T16:11:00.000Z","path":"2022/09/27/676f3926a532/","text":"RAID简述磁盘阵列（Redundant Arrays of Independent Disks，RAID），是把多个物理磁盘组成一个阵列,当作一个逻辑磁盘使用,它将数据以分段或条带的方式储存在不同的磁盘中，这样可以通过在多个磁盘上同时存储和读取数据来大幅提高存储系统的数据吞吐量。 创建RAID123mdadm -Cv /dev/md0 -a yes -l 5 -n 3 /dev/sda /dev/sdb /dev/sdc或mdadm --create /dev/md0 --level=5 --raid-device=3 /dev/sda /dev/sdb /dev/sdc 删除RAID12mdadm -S /dev/md0mdadm --zero-superblock /dev/sda","tags":[{"name":"raid","slug":"raid","permalink":"https://blog.bidd.net/tags/raid/"}]},{"title":"Debian11设置静态DNS","date":"2022-08-28T03:00:00.000Z","path":"2022/08/28/075cb1f31751/","text":"临时编辑 &#x2F;etc&#x2F;resolv.conf 1nameserver 114.114.114.114 永久编辑 &#x2F;etc&#x2F;dhcp&#x2F;dhclient.conf 12//取消注释prepend domain-name-servers 127.0.0.1;","tags":[{"name":"DNS","slug":"DNS","permalink":"https://blog.bidd.net/tags/DNS/"}]},{"title":"VN007+开启adb并获取超级密码","date":"2021-12-21T08:26:00.000Z","path":"2021/12/21/4e118219428e/","text":"某通VN007+获取adb并修改超级用户密码 开启ADB首先浏览器登录后台，利用F12功能查看请求列表，找到请求参数有sessionId的,将id复制备好，浏览器窗口不要关。 发送http请求开启adb（ip地址和sessionid需要根据你的实际情况修改） url:http://192.168.0.1/cgi-bin/http.cgitype:POSTdata: 1&#123;&quot;adbSwitch&quot;:&quot;1&quot;,&quot;cmd&quot;:237,&quot;method&quot;:&quot;POST&quot;,&quot;language&quot;:&quot;CN&quot;,&quot;sessionId&quot;:&quot;这里替换成你的sessionid&quot;&#125; 修改superadmin密码电脑安装adb环境，顺序执行下面的命令行 1234567adb connect 192.168.0.1:5555adb shellmdlcfg -f SYS_WEB_SUPER_PWD_RULE=&quot;1&quot;mdlcfg -a SYS_WEB_SUPER_PWD_RULE=&quot;1&quot;mdlcfg -f SYS_SUPER_LOGIN_PWD=&quot;替换成你的超级密码&quot;mdlcfg -a SYS_SUPER_LOGIN_PWD=&quot;替换成你的超级密码&quot;mdlcfg -c 现在用superadmin登录试试，不行重启一下，再不行请进群815256296请教. 20220620算M软件已放出，自己进群找。","tags":[{"name":"vn007+","slug":"vn007","permalink":"https://blog.bidd.net/tags/vn007/"}]},{"title":"win11去除快捷方式角标","date":"2021-10-08T09:25:00.000Z","path":"2021/10/08/0291a838b8aa/","text":"打开注册表位置（不存在则创建）： HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Icons 添加类型:字符串值名称:29内容: C:\\WINDOWS\\system32\\imageres.dll,197 重启windows资源管理器或者重启","tags":[{"name":"win11","slug":"win11","permalink":"https://blog.bidd.net/tags/win11/"}]},{"title":"Firefox虚拟定位","date":"2021-08-24T03:25:00.000Z","path":"2021/08/24/415b5ef2cea3/","text":"准备 打开火狐浏览器，地址栏输入1about:config 修改以下参数的值1234geo.enabled=true// NewYork// https://www.googleapis.com/geolocation/v1/geolocate?key=%GOOGLE_LOCATION_SERVICE_API_KEY%geo.provider.network.url=data:application/json,&#123;&quot;location&quot;: &#123;&quot;lat&quot;: 40.7590, &quot;lng&quot;: -73.9845&#125;, &quot;accuracy&quot;: 27000.0&#125; 自定义位置可到LatLong之类的网站获取数据 https://www.latlong.net/","tags":[{"name":"firefox","slug":"firefox","permalink":"https://blog.bidd.net/tags/firefox/"},{"name":"location","slug":"location","permalink":"https://blog.bidd.net/tags/location/"}]},{"title":"openwrt报错误USER_REQUEST","date":"2021-08-13T06:41:00.000Z","path":"2021/08/13/2b20b438391e/","text":"openwrtw拨号提示 USER_REQUEST，我这里的原因是因为删除了 WAN6,把 WAN6 添加回来就可以了。但是我的固件是自己编译的，完全删除了IPv6,这里提供另一种解决方案。 添加一个WAN接口，名字随意，协议:DHCP Client（DHCP客户端）设备:wan 重启","tags":[{"name":"openwrt","slug":"openwrt","permalink":"https://blog.bidd.net/tags/openwrt/"}]},{"title":"aria2下载完成后文件整理","date":"2021-08-13T06:11:00.000Z","path":"2021/08/13/d1a39ece145c/","text":"aria2下载路劲下一堆.aria2文件，乱七八糟的。网上搜了一圈解决方案，都是通过event删除这个文件，这里提供另一种方法，下载完成后将文件移动到另一个目录去。 在配置文件中指定下载完成后的脚本 1on-download-complete=/opt/aria2.sh 代码如下： 123456789101112131415161718#!/bin/bashpath=/mnt/disk/downloadcache=/mnt/disk/cache/if [ &quot;$3&quot; != &quot;&quot; ] &amp;&amp; [ $2 -gt 0 ];then # 删除当前路径 name=&quot;$&#123;3#$cache&#125;&quot; # 获取 / 下标 index=`expr index &quot;$&#123;name&#125;&quot; &#x27;/&#x27;` # 若下标存在则为文件夹，否则为文件 if [ $index -gt 0 ];then # 取总长度 length=&quot;$&#123;#3&#125;&quot; #index=$length-$index name=&quot;$&#123;name:0:$index-1&#125;&quot; fi #rm &quot;$&#123;name&#125;.aria2&quot; mv &quot;$&#123;cache&#125;$&#123;name&#125;&quot; &quot;$&#123;path&#125;&quot;fi","tags":[{"name":"aria2","slug":"aria2","permalink":"https://blog.bidd.net/tags/aria2/"}]},{"title":"sudoers文件变可写解决方法","date":"2021-07-16T02:47:00.000Z","path":"2021/07/16/81753e6953f2/","text":"尝试执行如下命令 1pkexec visudo 如果报错 123456789==== AUTHENTICATING FOR org.freedesktop.policykit.exec ===Authentication is needed to run `/usr/sbin/visudo&#x27; as the super userAuthenticating as: ubuntu,,, (ubuntu)Password:polkit-agent-helper-1: error response to PolicyKit daemon: GDBus.Error:org.freedesktop.PolicyKit1.Error.Failed: No session for cookie==== AUTHENTICATION FAILED ===Error executing command as another user: Not authorizedThis incident has been reported.———————————————— 打开两个终端（终端1、终端2）终端1 1echo $$ 终端2 1pkttyagent --process 终端1的结果 终端1 1pkexec visudo","tags":[{"name":"sudo","slug":"sudo","permalink":"https://blog.bidd.net/tags/sudo/"}]},{"title":"树莓派优化设置","date":"2021-06-01T04:05:00.000Z","path":"2021/06/01/3718fab325d7/","text":"备忘 延长SD卡寿命将一些频繁读取的目录挂载至内存中12345678910cat /etc/fstab# 提交间隔，默认5秒一次PARTUUID=ca2ecb0f-02 / ext4 defaults,lazytime,noatime,commit=600,errors=remount-ro 0 1tmpfs /var/log tmpfs defaults,noatime,nosuid,mode=0755,size=64m 0 0tmpfs /tmp tmpfs defaults,noatime,nosuid,size=2048m 0 0tmpfs /var/tmp tmpfs defaults,noatime,nosuid,size=64m 0 0tmpfs /root/.cache tmpfs defaults,noatime,nosuid,mode=0755,size=2048m 0 0tmpfs /var/cache/samba tmpfs defaults,noatime,nosuid,size=32m 0 0 关闭虚拟内存123dphys-swapfile swapoffdphys-swapfile uninstallsystemctl disable dphys-swapfile 关闭WIFI、BT、EEE、HDMI12345678910111213141516cat /boot/config.txt# 关闭以太网省电功能# 已失效#dtparam=eee=off# 替代方法 /etc/rc.local 添加# ethtool --set-eee eth0 eee offdtoverlay=disable-wifidtoverlay=disable-bt# 关闭HDMI##ontvservice -p##offtvservice -o 卸载多余软件12# 邮件服务apt remove exim4 exim4-* -y 残留包清理1dpkg -l |grep ^rc|awk &#x27;&#123;print $2&#125;&#x27; |sudo xargs dpkg -P","tags":[{"name":"config","slug":"config","permalink":"https://blog.bidd.net/tags/config/"}]},{"title":"dnsmasq指定客户端dns","date":"2020-12-12T16:08:00.000Z","path":"2020/12/12/47c544afc362/","text":"路由器为不同的设备单独设置不同的DNS服务器 1234567# 设置静态ip地址,标签为ad，名字为mmdhcp-host=xx:83:E7:xx:xx:xx,set:ad,192.168.5.105,xboxdhcp-host=xx:1A:xx:xx:xx:xx,set:ad,192.168.5.115,bbs# 根据标签设置dns服务器dhcp-option=tag:ad,option:dns-server,192.168.5.100# 根据标签设置路由dhcp-option=tag:ad,option:router,192.168.5.5","tags":[{"name":"dns","slug":"dns","permalink":"https://blog.bidd.net/tags/dns/"}]},{"title":"MacOS烧录img","date":"2020-12-12T02:58:00.000Z","path":"2020/12/12/1bf711704b89/","text":"转载自Mac下给SD卡烧录树莓派系统 格式化mac 磁盘工具 抹掉sd卡 为fat 找到sd卡1df -h 卸载sd卡1diskutil unmount /dev/disk2s2 列出sd卡分区1diskutil list 烧录1sudo dd bs=4m if=2017-09-07-raspbian-stretch.img of=/dev/disk2 卸载1diskutil unmountDisk /dev/disk2","tags":[{"name":"烧录","slug":"烧录","permalink":"https://blog.bidd.net/tags/%E7%83%A7%E5%BD%95/"}]},{"title":"git代理设置","date":"2020-12-09T09:09:00.000Z","path":"2020/12/09/48da15f48d93/","text":"转载自:macOS 给 Git(Github) 设置代理（HTTP&#x2F;SSH） 123456789101112131415161718192021222324252627282930313233Host * ServerAliveInterval 120 ServerAliveCountMax 5# 0x00 克隆 repo 的两种方式：https 和 ssh 方式# https 方式：git clone https://github.com/owner/git.git# ssh 方式：git clone git@github.com:owner/git.git# 0x01 https 方式克隆的 repo，走 http 或 sock5 代理，任选一个# 0x0101 http 代理# git config --global http.proxy &quot;http://127.0.0.1:1087&quot;# git config --global https.proxy &quot;http://127.0.0.1:1087&quot;# 0x0102 sock5 代理# git config --global http.proxy &quot;socks5://127.0.0.1:1086&quot;# git config --global https.proxy &quot;socks5://127.0.0.1:1086&quot;# 0x0103 取消使用代理# git config --global --unset http.proxy# git config --global --unset https.proxy# 0x02 ssh 克隆方式的代理设置，直接在全局设置文件配置，即 ~/.ssh/config 文件这里的nc为netcat,debian需要安装netcat-openbsdMac下的netcat版本太低，需要安装nmap，brew install nmapHost github.com HostName github.com User git # 走 HTTP 代理，需要 brew install socat # ProxyCommand socat - PROXY:127.0.0.1:%h:%p,proxyport=1087 # 走 socks5 代理（如 Shadowsocks） ProxyCommand nc -v -x 127.0.0.1:1086 %h %p # 走 socks5 代理（如 Shadowsocks），Windows 平台没有 nc 命令 # ProxyCommand connect -S 127.0.0.1:1086 %h %p","tags":[{"name":"proxy","slug":"proxy","permalink":"https://blog.bidd.net/tags/proxy/"}]},{"title":"MariaDB安装","date":"2020-12-03T11:52:00.000Z","path":"2020/12/03/4d69f12c4d5a/","text":"安装1apt install mariadb-server -y 初始化12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061[root@centos-db yum.repos.d]# mysql_secure_installationNOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB SERVERS IN PRODUCTION USE! PLEASE READ EACH STEP CAREFULLY!In order to log into MariaDB to secure it, we&#x27;ll need the currentpassword for the root user. If you&#x27;ve just installed MariaDB, andyou haven&#x27;t set the root password yet, the password will be blank,so you should just press enter here.Enter current password for root (enter for none): # 这里直接enter就可以了OK, successfully used password, moving on...Setting the root password ensures that nobody can log into the MariaDBroot user without the proper authorisation.Set root password? [Y/n] y # 1.是否设置root密码，选择YNew password: Re-enter new password: Password updated successfully!Reloading privilege tables.. ... Success!By default, a MariaDB installation has an anonymous user, allowing anyoneto log into MariaDB without having to have a user account created forthem. This is intended only for testing, and to make the installationgo a bit smoother. You should remove them before moving into aproduction environment.Remove anonymous users? [Y/n] y # 2.是否删除匿名账户，因为不安全，选择Y ... Success!Normally, root should only be allowed to connect from &#x27;localhost&#x27;. Thisensures that someone cannot guess at the root password from the network.Disallow root login remotely? [Y/n] y # 3.是否允许root用户远程登录，因为要在windows机器上去开发，所以选择Y ... Success!By default, MariaDB comes with a database named &#x27;test&#x27; that anyone canaccess. This is also intended only for testing, and should be removedbefore moving into a production environment.Remove test database and access to it? [Y/n] y # 4.删除测试数据库，选择Y - Dropping test database... ... Success! - Removing privileges on test database... ... Success!Reloading the privilege tables will ensure that all changes made so farwill take effect immediately.Reload privilege tables now? [Y/n] y # 5.是否立即刷新权限表，选择Y ... Success!Cleaning up...All done! If you&#x27;ve completed all of the above steps, your MariaDBinstallation should now be secure.Thanks for using MariaDB!","tags":[{"name":"mariadb","slug":"mariadb","permalink":"https://blog.bidd.net/tags/mariadb/"}]},{"title":"hexo安装依赖ejs报错","date":"2020-08-18T10:02:56.000Z","path":"2020/08/18/f24295742262/","text":"报错信息如下1234567891011121314151617181920212223242526&gt; ejs@2.7.4 postinstall /root/sw/blog/node_modules/hexo-renderer-ejs/node_modules/ejs&gt; node ./postinstall.jsinternal/modules/cjs/loader.js:1023 throw err; ^Error: Cannot find module &#x27;/root/sw/blog/node_modules/hexo-renderer-ejs/node_modules/ejs/postinstall.js&#x27; at Function.Module._resolveFilename (internal/modules/cjs/loader.js:1020:15) at Function.Module._load (internal/modules/cjs/loader.js:890:27) at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:71:12) at internal/main/run_main_module.js:17:47 &#123; code: &#x27;MODULE_NOT_FOUND&#x27;, requireStack: []&#125;npm ERR! code ELIFECYCLEnpm ERR! errno 1npm ERR! ejs@2.7.4 postinstall: `node ./postinstall.js`npm ERR! Exit status 1npm ERR!npm ERR! Failed at the ejs@2.7.4 postinstall script.npm ERR! This is probably not a problem with npm. There is likely additional logging output above.npm ERR! A complete log of this run can be found in:npm ERR! /root/.npm/_logs/2020-08-18T08_24_47_894Z-debug.log 我出现这个问题的原因是因为nodejs和npm版本不匹配？解决方案就是删除自己安装的nodejs和npm,重新安装。 我用一个第三方node版本管理软件解决了 1https://github.com/nvm-sh/nvm","tags":[{"name":"hexo","slug":"hexo","permalink":"https://blog.bidd.net/tags/hexo/"},{"name":"ejs","slug":"ejs","permalink":"https://blog.bidd.net/tags/ejs/"}]},{"title":"树莓派开启热点并设置透明代理","date":"2019-06-05T02:12:19.000Z","path":"2019/06/05/f343eab208cb/","text":"因为我的ps4需要。 安装必要软件 apt install dnsmasq hostapd shadowsocks-libev 配置静态IP vi &#x2F;etc&#x2F;dhcpcd.conf 添加 interface wlan0 static ip_address&#x3D;192.168.5.1&#x2F;24 nohook wpa_supplicant 重启dhcpcd守护进程systemctl restart dhcpcd 配置DHCP服务器（dnsmasq） vi &#x2F;etc&#x2F;dnsmasq.conf 添加 interface&#x3D;wlan0server&#x3D;8.8.8.8bogus-nxdomain&#x3D;8.8.8.8# 提供50到60的IP地址给客户端，时限为24小时dhcp-range&#x3D;192.168.5.50,192.168.5.60,255.255.255.0,24h 启动dhcp服务器systemctl start dnsmasqsystemctl reload dnsmasqsystemctl enable dnsmasq 配置接入点主机软件（hostapd） vi &#x2F;etc&#x2F;hostapd&#x2F;hostapd.conf 添加 interface&#x3D;wlan0driver&#x3D;nl80211ssid&#x3D;NameOfNetworkhw_mode&#x3D;gchannel&#x3D;7wmm_enabled&#x3D;0macaddr_acl&#x3D;0auth_algs&#x3D;1ignore_broadcast_ssid&#x3D;0wpa&#x3D;2wpa_passphrase&#x3D;AardvarkBadgerHedgehogwpa_key_mgmt&#x3D;WPA-PSKwpa_pairwise&#x3D;TKIPrsn_pairwise&#x3D;CCMP 注： hw_mode参数a &#x3D; IEEE 802.11a（5 GHz）b &#x3D; IEEE 802.11b（2.4 GHz）g &#x3D; IEEE 802.11g（2.4 GHz）ad &#x3D; IEEE 802.11ad（60 GHz） 指定配置文件 vi &#x2F;etc&#x2F;default&#x2F;hostapd 将#DAEMON_CONF取消注释并加入地址,没有就添加DAEMON_CONF&#x3D;”&#x2F;etc&#x2F;hostapd&#x2F;hostapd.conf” 启动hostapdsystemctl unmask hostapdsystemctl enable hostapdsystemctl start hostapd 启用转发 vi &#x2F;etc&#x2F;sysctl.conf 取消注释或添加net.ipv4.ip_forward&#x3D;1修改后重启或执行sysctl -p使其生效 配置规则我这里ss本地端口是1080，按需修改 123456789101112131415161718192021222324252627iptables -t nat -N SSTCPiptables -t nat -A SSTCP -d 梯子的IP地址或域名 -j RETURNiptables -t nat -A SSTCP -d 0.0.0.0/8 -j RETURNiptables -t nat -A SSTCP -d 10.0.0.0/8 -j RETURNiptables -t nat -A SSTCP -d 127.0.0.0/8 -j RETURNiptables -t nat -A SSTCP -d 169.254.0.0/16 -j RETURNiptables -t nat -A SSTCP -d 172.16.0.0/12 -j RETURNiptables -t nat -A SSTCP -d 192.168.0.0/16 -j RETURNiptables -t nat -A SSTCP -d 224.0.0.0/4 -j RETURNiptables -t nat -A SSTCP -d 240.0.0.0/4 -j RETURNiptables -t nat -A SSTCP -s 192.168.5.0/24 -p tcp -j REDIRECT --to-ports 1080iptables -t nat -A PREROUTING -p tcp -j SSTCPip route add local 0.0.0.0/0 dev lo table 100ip rule add fwmark 1 table 100iptables -t mangle -N SSUDPiptables -t mangle -A SSUDP -d 梯子的IP地址或域名 -j RETURNiptables -t mangle -A SSUDP -d 0.0.0.0/8 -j RETURNiptables -t mangle -A SSUDP -d 10.0.0.0/8 -j RETURNiptables -t mangle -A SSUDP -d 127.0.0.0/8 -j RETURNiptables -t mangle -A SSUDP -d 169.254.0.0/16 -j RETURNiptables -t mangle -A SSUDP -d 172.16.0.0/12 -j RETURNiptables -t mangle -A SSUDP -d 192.168.0.0/16 -j RETURNiptables -t mangle -A SSUDP -d 224.0.0.0/4 -j RETURNiptables -t mangle -A SSUDP -d 240.0.0.0/4 -j RETURNiptables -t mangle -A SSUDP -s 192.168.5.0/24 -p udp -j TPROXY --on-port 1080 --tproxy-mark 0x01/0x01iptables -t mangle -A PREROUTING -p udp -j SSUDP 启动ssr这里一定要用ss-redir，并且本地ip为0.0.0.0,-u参数最好加上，不然udp不走电梯 ss-redir -c config.json -v -u config.json为你自己的ssr配置文件","tags":[{"name":"proxy","slug":"proxy","permalink":"https://blog.bidd.net/tags/proxy/"}]},{"title":"树莓派开启看门狗","date":"2019-05-17T15:10:33.000Z","path":"2019/05/17/969679a66394/","text":"备： 检查驱动1ls /dev/watchdog 如果有这个文件直接跳到开机加载驱动 加载驱动 树莓派 1代的驱动名为：bcm2708_wdog树莓派 2代的驱动名为：bcm2709_wdog树莓派 3代的驱动名为：bcm2835_wdt 1modprobe -v 驱动名 然后回到上一步检查驱动 开机加载驱动1vi /etc/modules 在文件中加一行 驱动名 即可 安装通信软件安装通信软件并设置开机自启 12apt-get install watchdogsystemctl enable watchdog 配置看门狗1vi /etc/watchdog.conf 取消 #max-load-1&#x3D;24 的注释，代表当系统 1 分钟内的负载高于 24（已经非常非常高了），就重启系统取消 #watchdog-device&#x3D;&#x2F;dev&#x2F;watchdog 的注释，设置看门狗的路径增加一行 watchdog-timeout &#x3D; 15，代表 15 秒内系统无响应就重启系统，在树莓派 3B 上这个值最高为15。注意不要设置的太小，否则可能造成系统反复重启。保存，重启服务service watchdog restart 测试12pkill -9 watchdogpkill -9 wd_keepalive 系统自动重启，成功","tags":[{"name":"树莓派","slug":"树莓派","permalink":"https://blog.bidd.net/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"},{"name":"看门狗","slug":"看门狗","permalink":"https://blog.bidd.net/tags/%E7%9C%8B%E9%97%A8%E7%8B%97/"}]},{"title":"汇编命令及OD常用命令及断点设置","date":"2019-04-23T09:50:54.000Z","path":"2019/04/23/09eea0b73f9f/","text":"转载自吾爱破解 汇编32位CPU所含有的寄存器有： 4个数据寄存器(EAX、EBX、ECX和EDX)对低16位数据的存取，不会影响高16位的数据。这些低16位寄存器分别命名为：AX、BX、CX和DX，它和先前的CPU中的寄存器相一致。4个16位寄存器又可分割成8个独立的8位寄存器(AX：AH-AL、BX：BH-BL、CX：CH-CL、DX：DH-DL)，每个寄存器都有自己的名称，可独立存取。 寄存器EAX通常称为累加器(Accumulator) 用累加器进行的操作可能需要更少时间。可用于乘、 除、输入&#x2F;输出等操作，使用频率很高；寄存器EBX称为基地址寄存器(Base Register)它可作为存储器指针来使用；寄存器ECX称为计数寄存器(Count Register) 在循环和字符串操作时，要用它来控制循环次数；在位操作中，当移多位时，要用CL来指明移位的位数；寄存器EDX称为数据寄存器(Data Register) 在进行乘、除运算时，它可作为默认的操作数参与运算，也可用于存放I&#x2F;O的端口地址 注意：在16位CPU中，AX、BX、CX和DX不能作为基址和变址寄存器来存放存储单元的地址， 在32位CPU中，其32位寄存器EAX、EBX、ECX和EDX不仅可传送数据、暂存数据保存算术逻辑运算结果， 2个变址和指针寄存器(ESI和EDI) 其低16位对应先前CPU中的SI和DI，对低16位数据的存取，不影响高16位的数据。寄存器ESI、EDI、SI和DI称为变址寄存器(Index Register)，它们主要用于存放存储单元在段内的偏移量，用它们可实现多种存储器操作数的寻址方式，为以不同的地址形式访问存储单元提供方便。 2个指针寄存器(ESP和EBP)其低16位对应先前CPU中的BP和SP，对低16位数据的存取，不影响高16位的数据。32位CPU有2个32位通用寄存器EBP和ESP。它们主要用于访问堆栈内的存储单元。寄存器EBP、ESP、BP和SP称为指针寄存器(Pointer Register)，主要用于存放堆栈内存储单元的偏移量，用它们可实现多种存储器操作数的寻址方式，为以不同的地址形式访问存储单元提供方便。指针寄存器不可分割成8位寄存器。作为通用寄存器，也可存储算术逻辑运算的操作数和运算结果。EBP为基指针(Base Pointer)寄存器，用它可直接存取堆栈中的数据ESP为堆栈指针(Stack Pointer)寄存器，用它只可访问栈顶 6个段寄存器(ES、CS、SS、DS、FS和GS)段寄存器 段寄存器是根据内存分段的管理模式而设置的。内存单元的物理地址由段寄存器的值和一个偏移量组合而成的，这样可用两个较少位数的值组合成一个可访问较大物理空间的内存地址。CPU内部的段寄存器：ECS——代码段寄存器(Code Segment Register)，其值为代码段的段值；EDS——数据段寄存器(Data Segment Register)，其值为数据段的段值；EES——附加段寄存器(Extra Segment Register)，其值为附加数据段的段值；ESS——堆栈段寄存器(Stack Segment Register)，其值为堆栈段的段值；EFS——附加段寄存器(Extra Segment Register)，其值为附加数据段的段值；EGS——附加段寄存器(Extra Segment Register)，其值为附加数据段的段值。 1个指令指针寄存器(EIP) 指令指针EIP、IP(Instruction Pointer)是存放下次将要执行的指令在代码段的偏移量。 1个标志寄存器(EFlags) 1、进位标志CF(Carry Flag)进位标志CF主要用来反映运算是否产生进位或借位。如果运算结果的最高位产生了一个进位或借位，那么，其值为1，否则其值为0。使用该标志位的情况有：多字(字节)数的加减运算，无符号数的大小比较运算，移位操作，字(字节)之间移位，专门改变CF值的指令等。 2、奇偶标志PF(Parity Flag)奇偶标志PF用于反映运算结果中“1”的个数的奇偶性。如果“1”的个数为偶数，则PF的值为1，否则其值为0。利用PF可进行奇偶校验检查，或产生奇偶校验位。在数据传送过程中，为了提供传送的可靠性，如果采用奇偶校验的方法，就可使用该标志位。 3、辅助进位标志AF(Auxiliary Carry Flag)在发生下列情况时，辅助进位标志AF的值被置为1，否则其值为0：(1)、在字操作时，发生低字节向高字节进位或借位时；(2)、在字节操作时，发生低4位向高4位进位或借位时。对以上6个运算结果标志位，在一般编程情况下，标志位CF、ZF、SF和OF的使用频率较高，而标志位PF和AF的使用频率较低。 4、零标志ZF(Zero Flag)零标志ZF用来反映运算结果是否为0。如果运算结果为0，则其值为1，否则其值为0。在判断运算结果是否为0时，可使用此标志位。 5、符号标志SF(Sign Flag)符号标志SF用来反映运算结果的符号位，它与运算结果的最高位相同。在微机系统中，有符号数采用码表示法，所以，SF也就反映运算结果的正负号。运算结果为正数时，SF的值为0，否则其值为1。 6、溢出标志OF(Overflow Flag)溢出标志OF用于反映有符号数加减运算所得结果是否溢出。如果运算结果超过当前运算位数所能表示的范围，则称为溢出，OF的值被置为1，否则，OF的值被清为0。“溢出”和“进位”是两个不同含义的概念，不要混淆。如果不太清楚的话，请查阅《计算机组成原理》课程中的有关章节。 二、状态控制标志位状态控制标志位是用来控制CPU操作的，它们要通过专门的指令才能使之发生改变。1、追踪标志TF(Trap Flag)当追踪标志TF被置为1时，CPU进入单步执行方式，即每执行一条指令，产生一个单步中断请求。这种方式主要用于程序的调试。指令系统中没有专门的指令来改变标志位TF的值，但程序员可用其它办法来改变其值。2、中断允许标志IF(Interrupt-enable Flag)中断允许标志IF是用来决定CPU是否响应CPU外部的可屏蔽中断发出的中断请求。但不管该标志为何值，CPU都必须响应CPU外部的不可屏蔽中断所发出的中断请求，以及CPU内部产生的中断请求。具体规定如下：(1)、当IF&#x3D;1时，CPU可以响应CPU外部的可屏蔽中断发出的中断请求；(2)、当IF&#x3D;0时，CPU不响应CPU外部的可屏蔽中断发出的中断请求。CPU的指令系统中也有专门的指令来改变标志位IF的值。3、方向标志DF(Direction Flag)方向标志DF用来决定在串操作指令执行时有关指针寄存器发生调整的方向。具体规定在第5.2.11节——字符串操作指令——中给出。在微机的指令系统中，还提供了专门的指令来改变标志位DF的值。 汇编指令：常用MOV 传送字或字节.MOVSX 先符号扩展,再传送.MOVZX 先零扩展,再传送.PUSH 把字压入堆栈.POP 把字弹出堆栈.PUSHA 把AX,CX,DX,BX,SP,BP,SI,DI依次压入堆栈.POPA 把DI,SI,BP,SP,BX,DX,CX,AX依次弹出堆栈.PUSHAD 把EAX,ECX,EDX,EBX,ESP,EBP,ESI,EDI依次压入堆栈.POPAD 把EDI,ESI,EBP,ESP,EBX,EDX,ECX,EAX依次弹出堆栈. XCHG 交换字或字节.( 至少有一个操作数为寄存器,段寄存器不可作为操作数)CMPXCHG 比较并交换操作数.( 第二个操作数必须为累加器AL&#x2F;AX&#x2F;EAX )XADD 先交换再累加.( 结果在第一个操作数里 ) ADD 加法.ADC 带进位加法.INC 加 1.AAA 加法的ASCII码调整.DAA 加法的十进制调整.SUB 减法.SBB 带借位减法.DEC 减 1.NEC 求反(以 0 减之).CMP 比较.(两操作数作减法,仅修改标志位,不回送结果).AAS 减法的ASCII码调整.DAS 减法的十进制调整.MUL 无符号乘法.IMUL 整数乘法.AAM 乘法的ASCII码调整.DIV 无符号除法.IDIV 整数除法.AAD 除法的ASCII码调整.CBW 字节转换为字. (把AL中字节的符号扩展到AH中去)CWD 字转换为双字. (把AX中的字的符号扩展到DX中去)CWDE 字转换为双字. (把AX中的字符号扩展到EAX中去)CDQ 双字扩展. (把EAX中的字的符号扩展到EDX中去) 逻辑运算指令AND 与运算.OR 或运算.XOR 异或运算.NOT 取反.TEST 测试.(两操作数作与运算,仅修改标志位,不回送结果).SHL 逻辑左移.SAL 算术左移.(&#x3D;SHL)SHR 逻辑右移.SAR 算术右移.(&#x3D;SHR)ROL 循环左移.ROR 循环右移.RCL 通过进位的循环左移.RCR 通过进位的循环右移. 程序转移指令1.简单的条件转移指令JZ(或jE) OPR—————结果为零转移, 测试条件ZF&#x3D;1JNZ(或jNE) OPR ————–结果不为零转移,测试条件ZF&#x3D;0JS OPR———————-结果为负转移, 测试条件SF&#x3D;1JNS OPR———————结果为正转移, 测试条件SF&#x3D;0JO OPR——————— 溢出转移, 测试条件OF&#x3D;JNO OPR ——————–不溢出转移 , 测试条件SF&#x3D;0JP OPR ———————结果为偶转移, 测试条件SF&#x3D;1JNP OPR ——————–结果为奇转移 , 测试条件SF&#x3D;0JC OPR ——————– 有进位转移 , 测试条件SF&#x3D;1JNC OPR ——————–无进位转移, 测试条件SF&#x3D;0 2.无符号比较条件转移指令(以下指令经常是CMP OPD,OPS后面的指令根据比较结果来实现转移)JB(或JNAE) opd ————–小于或者不大于等于则转移JNB(或JAE) opd—————不小于或者大于等于则转移JA(或NJBE) OPD—————大于或者不小于等于则转移JNA(或JBE) OPD—————不大于或者小于等于则转移 3.带符号比较条件转移指令JL(或JNGE) ————–小于或者不大于等于则转移JNL(或JGE)————–不小于或者大于等于则转移JG(或NJLE)—————大于或者不小于等于则转移JNG(或JLE)—————不大于或者小于等于则转移 调用子程序与返回指令CALL 子程序调用指令RET 子程序返回指令 其它指令OFFSET ——————– 返回偏移地址SEG ——————– 返回段地址EQU(&#x3D;) ——————– 等值语句PURGE ——————– 解除语句DUP ——————– 操作数字段用复制操作符SEGMENT,ENDS ——————– 段定义指令ASSUME ——————– 段地址分配指令ORG ——————– 起始偏移地址设置指令$ ——————–地址计数器的当前值PROC，ENDP ——————– 过程定义语句NAME，TITLE，END ——————– 程序开始结束语句MACRO，ENDM ——————–宏定义指令XLAT （TRANSLATE） ——————– 换码指令—- 条件标志ZF 零标志 – 当结果为负时,SF&#x3D;1,否则,SF&#x3D;0.AF 辅助进位标志—运算过程中第三位有进位值,置AF&#x3D;1,否则,AF&#x3D;0PF 奇偶标志——当结果操作数中偶数个”1”,置PF&#x3D;1,否则,PF&#x3D;0SF 符号标志—-当结果为负时,SF&#x3D;1;否则,SF&#x3D;0.溢出时情形例外CF 进位标志—– 最高有效位产生进位值,例如,执行加法指令时,MSB有进位,置CF&#x3D;1;否则,CF&#x3D;0.OF 溢出标志—–若操作数结果超出了机器能表示的范围,则产生溢出,置OF&#x3D;1,否则,OF&#x3D;0 OllyDbg 常用快捷热键打开一个新的可执行程序 (F3)重新运行当前调试的程序 (Ctrl+F2)当前调试的程序 (Alt+F2)运行选定的程序进行调试 (F9)暂时停止被调试程序的执行 (F12)单步进入被调试程序的 Call 中 (F7)步过被调试程序的 Call (F8)跟入被调试程序的 Call 中 (Ctrl+F11)跟踪时跳过被调试程序的 Call (Ctrl+F12)执行直到返回 (Ctrl+F9)显示记录窗口 (Alt+L)显示模块窗口 (Alt+E)显示内存窗口 (Alt+M)显示 CPU 窗口 (Alt+C)显示补丁窗口 (Ctrl+P)显示呼叫堆栈 (Alt+K)显示断点窗口 (Alt+B)打开调试选项窗口 (Alt+O) F9 使用方法：Ctrl+F9 运行至retAlt+F9 运行至上层调用的下句Shift+F9 忽略异常运行 BTW：OllyDbg.hlp有中文翻译版为何不看？Shift+F9 - 与F9相同，但是如果被调试程序发生异常而中止，调试器会首先尝试执行被调试程序指定的异常处理（请参考忽略Kernel32中的内存非法访问）。Ctrl+F9 - 执行直到返回，跟踪程序直到遇到返回，在此期间不进入子函数也不更新CPU数据。因为程序是一条一条命令执行的，所以速度可能会慢一些。按Esc键，可以停止跟踪。Alt+F9 - 执行直到返回到用户代码段，跟踪程序直到指令所属于的模块不在系统目录中，在此期间不进入子函数也不更新CPU数据。因为程序是一条一条执行的，所以速度可能会慢一些。按Esc键，可以停止跟踪。 F9 - 让程序继续执行。Shift+F9 - 与F9相同，但是如果被调试程序发生异常而中止，调试器会首先尝试执行被调试程序指定的异常处理（请参考忽略Kernel32中的内存非法访问）。Ctrl+F9 - 执行直到返回，跟踪程序直到遇到返回，在此期间不进入子函数也不更新CPU数据。因为程序是一条一条命令执行的，所以速度可能会慢一些。按Esc键，可以停止跟踪。Alt+F9 - 执行直到返回到用户代码段，跟踪程序直到指令所属于的模块不在系统目录中，在此期间不进入子函数也不更新CPU数据。因为程序是一条一条执行的，所以速度可能会慢一些。按Esc键，可以停止跟踪。Ctrl+F11 -Run跟踪步入，一条一条执行命令，进入每个子函数调用，并把寄存器的信息加入到Run跟踪的存储数据中。Run跟踪不会同步更新CPU窗口。F12 - 停止程序执行，同时暂停被调试程序的所有线程。请不要手动恢复线程运行，最好使用继续执行快捷键或菜单选项（像 F9）。Ctrl+F12 - Run跟踪 步过，一条一条执行命令，但是不进入子函数调用，，并把寄存器的信息加入到Run跟踪的存储数据中。Run跟踪不会同步更新CPU窗口。Esc - 如果当前处于自动运行或跟踪状态，则停止自动运行或跟踪；如果CPU显示的是跟踪数据，则显示真实数据。Alt+B - 显示断点窗口。在这个窗口中，您可以编辑、删除、或跟进到断点处。Alt+C - 显示CPU窗口。Alt+E - 显示模块列表［list of modules］。Alt+K - 显示调用栈［Call stack］窗口。Alt+L - 显示日志窗口。Alt+M - 显示内存窗口。Alt+O - 显示选项对话框［Options dialog］Ctrl+P - 显示补丁窗口。Ctrl+T - 打开 暂停 Run跟踪 对话框Alt+X - 关闭 OllyDbg。大多数窗口都支持以下的键盘命令：Alt+F3 - 关闭当前窗口。Ctrl+F4 - 关闭当前窗口。F5 - 最大化当前窗口或将当前窗口大小改为正常化。F6 - 切换到下一个窗口。Shift+F6 - 切换到前一个窗口。F10 - 打开与当前窗口或面板相关的快捷菜单。左方向键 - 显示窗口左方一个字节宽度的内容。Ctrl+左方向键 - 显示窗口左方一栏的内容。右方向键 - 显示窗口右方一个字节宽度的内容Ctrl+右方向键 - 显示窗口右方一栏的内容 常用断点拦截窗口：bp CreateWindow 创建窗口bp CreateWindowEx(A) 创建窗口bp ShowWindow 显示窗口bp UpdateWindow 更新窗口bp GetWindowText(A) 获取窗口文本 拦截消息框：bp MessageBox(A) 创建消息框bp MessageBoxExA 创建消息框bp MessageBoxIndirect(A) 创建定制消息框bp IsDialogMessageW 拦截警告声：bp MessageBeep 发出系统警告声(如果没有声卡就直接驱动系统喇叭发声) 拦截对话框：bp DialogBox 创建模态对话框bp DialogBoxParam(A) 创建模态对话框bp DialogBoxIndirect 创建模态对话框bp DialogBoxIndirectParam(A) 创建模态对话框bp CreateDialog 创建非模态对话框bp CreateDialogParam(A) 创建非模态对话框bp CreateDialogIndirect 创建非模态对话框bp CreateDialogIndirectParam(A) 创建非模态对话框bp GetDlgItemText(A) 获取对话框文本bp GetDlgItemInt 获取对话框整数值 拦截剪贴板：bp GetClipboardData 获取剪贴板数据 拦截注册表：bp RegOpenKey(A) 打开子健bp RegOpenKeyEx 打开子健bp RegQueryValue(A) 查找子健bp RegQueryValueEx 查找子健bp RegSetValue(A) 设置子健bp RegSetValueEx(A) 设置子健 功能限制拦截断点：bp EnableMenuItem 禁止或允许菜单项bp EnableWindow 禁止或允许窗口 拦截时间：bp GetLocalTime 获取本地时间bp GetSystemTime 获取系统时间bp GetFileTime 获取文件时间bp GetTickCount 获得自系统成功启动以来所经历的毫秒数bp GetCurrentTime 获取当前时间（16位）bp SetTimer 创建定时器bp TimerProc 定时器超时回调函数GetDlgItemInt 得指定输入框整数值GetDlgItemText 得指定输入框输入字符串GetDlgItemTextA 得指定输入框输入字符串 拦截文件：bp CreateFileA 创建或打开文件 (32位)bp OpenFile 打开文件 (32位)bp ReadFile 读文件 (32位)bp WriteFile 写文件 (32位)GetModuleFileNameAGetFileSizeSetfilepointerfileopenFindFirstFileAReadFile拦截驱动器：bp GetDriveTypeA 获取磁盘驱动器类型bp GetLogicalDrives 获取逻辑驱动器符号bp GetLogicalDriveStringsA 获取当前所有逻辑驱动器的根驱动器路径 ★★VB程序专用断点★★ 文件长度：RtcFileLenbp __vbaFreeStr 对付VB程序重启验证bp __vbaStrCmp 比较字符串是否相等bp __vbaStrComp 比较字符串是否相等bp __vbaVarTstNe 比较变量是否不相等bp __vbaVarTstEq 比较变量是否相等bp __vbaStrCopy 复制字符串bp __vbaStrMove 移动字符串bp MultiByteToWideChar ANSI字符串转换成Unicode字符串bp WideCharToMultiByte Unicode字符串转换成ANSI字符串&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;密码常用中断Hmemcpy (win9x专用)GetDlgItemTextAGetDlgItemIntvb:getvolumeinformationa vbastrcomp (trw)Bpx _vbaStrComp (记得是两个 ‘‘)MSVBVM60!_vbastrcomp|soficeMSVBVM50! | VBAI4STR Ctrl+Dbpx msvbvm60!__vbastrcomp do “d (esp+0c)”(softice)按几次F5出册码出来了。bpx regqueryvalueexa do “d esp－&gt;8”(trw) vbaVarTstEq 判断是否注册的函数(0042932F 66898580FEFFFF mov word ptr [ebp+FFFFFE80], ax改为0042932F 66898580FEFFFF mov word ptr [ebp+FFFFFE80], bx)时间常用中断GetSystemTimeGetLocalTimeGetTickCountvb:rtcGetPresentDate &#x2F;&#x2F;取得当前日期 杀窗常用中断Lockmytask (win9x专用)bp ExitProcess 退出进程DestroyWindowmouse_event (鼠标中断)postquitmessage (Cracking足彩xp,很有用^_^)vb:_rtcMsgBox ini文件内容常用中断GetPrivateProfileStringAGetPrivateProfileProfileInt key文件:getprivateprofileintReadFileCreateFileA 注册表常用中断RegQueryvalueARegQueryvalueExA 狗加密中断BPIO -h 278 RBPIO -h 378 R 其它常用函数断点CreateFileA (读狗驱动程序),DeviceIOControl,FreeEnvironmentStringsA (对付HASP非常有效).Prestochangoselector (16-bit HASP’s), ‘7242’ 查找字符串 (对付圣天诺).具体含义参考下面的范例。 光盘破解中断16:getvolumeinformationgetdrivetypeint 2fh (dos)32:GetDriveTypeAGetFullPathNameAGetWindowsDirectoryA 读磁盘中断GETLASTERROR 返回扩充出错代码 限制中断EnableMenuItem 允许、禁止或变灰指定的菜单条目EnableWindow 允许或禁止鼠标和键盘控制指定窗口和条目（禁止时菜单变灰） 不知道软盘中断是什么了？还有其它特殊中断，不知道其他朋友可否说一下了？如ockmytask and mouse_event，这些就不是api32函数？win9x 与 win2k进行破解，以上中断有部分已经不能用了？不知道在win2k上，以上常用中断函数是什么了？也就是问密码、时间、窗口、ini、key、注册表、加密狗、光盘、软盘、限制等！了解常用的中断，对破解分析可以做到事半功倍！请大家说一下！还有如何破解了某个软件时，一重启就打回原形？不知道下什么中断了？可以分为三种情况：1.比较可能在注册表中2.比较在特殊文件(.key .ini .dat等)3.比较在程序中，没有任何错误提示或者反译也找不到明显字符(这个就是我想问的) 还有一个是最难的，就是去掉水印！也可以三种情况：A.水印是位图文件(bitblt,creatBITMAP等位图函数)B.水印是明显字符(反译分析)C.水印不是明显字符(如：This a demo!它只是显示在另一个制作文件上,可是.htm .exe等)C.才是最难搞，也是很多人想知道的！包括我在内。不知道高手们有何提示了？ 广告条：可以分两种情况:A.从创建窗口进手,可以用到movewindow或者其它窗口函数!B.从位图进手,也可以用到bitblt或者其它位图函数!最后可以借助一些现有工具(如:api27,vwindset,freespy之类的工具) 葡萄虽无树，藤生棚中秧。人处凡尘中，岂不惹尘埃? 小球[CCG]那要看是在哪作的标记，通常是在注册表中留下信息！在softice中就要用bpx regqueryvalueexa do “d esp-&gt;8”来中断看看，在trw中要用bpx regqueryvalueexa do “d(esp+8)”来中断看看。还有的是在本目录下留下注册信息，常见的有.dat .ini .dll等等，我是用bpx readfile来中断的，还有的是在windows目录下留下注册信息。你可以借助专用的工具帮助你查看，入filemon等！ vb: 1、__vbaVarTstNe &#x2F;&#x2F;比较两个变量是否不相等2、rtcR8ValFromBstr &#x2F;&#x2F;把字符串转换成浮点数3、rtcMsgBox 显示一信息对话框4、rtcBeep &#x2F;&#x2F;让扬声器叫唤5、rtcGetPresentDate &#x2F;&#x2F;取得当前日期 针对字串:__vbaStrComp__vbaStrCmp__vbaStrCompVar__vbaStrLike__vbaStrTextComp__vbaStrTextLike针对变量:__vbaVarCompEq__vbaVarCompLe__vbaVarCompLt__vbaVarCompGe__vbaVarCompGt__vbaVarCompNe 常用断点（2）VB的指针:THROW VB DLL还调用了oleauto32.dll中的部分函数。oleauto32.dll是个通用的proxy&#x2F;stub DLL，其每个函数的原型在&lt;oleauto.h&gt;中定义，并在MSDN中有详细描述。这也有助于理解VB DLL中的函数的作用。 举例： LEA EAX, [EBP-58]PUSH EAXCALL [MSVBVM60!__vbaI4Var] 执行call之前敲dd eax+8，得到的值为3；执行完call之后，eax &#x3D; 3从而可知__vbaI4Var的作用是将一个VARIANT转换为I4（即一个长整数）。 __vbaVarTstNe似乎是用来进行自校验的，正常情况下返回值为0。已知适用的软件有：网络三国智能机器人、音乐贺卡厂。当这两个软件被脱壳后都回出错，网络三国智能机器人会产生非法作，而音乐贺卡厂会告诉你是非法拷贝，通过修改__vbaVarTstNe的返回值都可让它们正常运行。所以当您遇到一个VB软件，脱壳后无法正常运行，而又找不出其它问题时，可试试拦截这个函数，说不定会有用哦。8-） API不太知道,也许可以通过BIOS在98平台上读写扇区,不过在2000&#x2F;NT下可以通过内黑ATAPI,HAL写扇区machoman[CCG]bpx WRITE_PORT_BUFFER_USHORTNT&#x2F;2000下这个断点,当edx&#x3D;1f0h,时,可以看见EDI地址内数据为扇区位置数据,必须先 在winice.dat 中装入hal.sys 详细内容看ATAPI手册 补充篇:关于对VB程序和时间限制程序的断点CrackerABC先给出修改能正确反编译VB程序的W32DASM的地址：offsets 0x16B6C-0x16B6D 修改机器码为： 98 F4&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; VB程序的跟踪断点： MultiByteToWideChar,rtcR8ValFromBstr,WideCharToMultiByte,__vbaStrCmp__vbaStrComp__vbaStrCopy__vbaStrMove__vbaVarTstNertcBeeprtcGetPresentDate (时间API)rtcMsgBox&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 时间限制断点： CompareFileTimeGetLocalTimeGetSystemTimeGetTimeZoneInformationmsvcrt.diffTime()msvcrt.Time()&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 一般处理bpx hmemcpybpx MessageBoxbpx MessageBoxExAbpx MessageBeepbpx SendMessage bpx GetDlgItemTextbpx GetDlgItemIntbpx GetWindowTextbpx GetWindowWordbpx GetWindowIntbpx DialogBoxParamAbpx CreateWindowbpx CreateWindowExbpx ShowWindowbpx UpdateWindow bmsg xxxx wm_movebmsg xxxx wm_gettextbmsg xxxx wm_commandbmsg xxxx wm_activate 时间相关bpint 21 if ah&#x3D;&#x3D;2A (DOS)bpx GetLocalTimebpx GetFileTimebpx GetSystemtime CD-ROM 或 磁盘相关bpint 13 if ah&#x3D;&#x3D;2 (DOS)bpint 13 if ah&#x3D;&#x3D;3 (DOS)bpint 13 if ah&#x3D;&#x3D;4 (DOS)bpx GetFileAttributesAbpx GetFileSizebpx GetDriveTypebpx GetLastErrorbpx ReadFilebpio -h (Your CD-ROM Port Address) R 软件狗相关bpio -h 278 Rbpio -h 378 R 键盘输入相关bpint 16 if ah&#x3D;&#x3D;0 (DOS)bpint 21 if ah&#x3D;&#x3D;0xA (DOS) 文件访问相关bpint 21 if ah&#x3D;&#x3D;3dh (DOS)bpint 31 if ah&#x3D;&#x3D;3fh (DOS)bpint 21 if ah&#x3D;&#x3D;3dh (DOS)bpx ReadFilebpx WriteFilebpx CreateFilebpx SetFilePointerbpx GetSystemDirectory INI 初始化文件相关bpx GetPrivateProfileStringbpx GetPrivateProfileIntbpx WritePrivateProfileStringbpx WritePrivateProfileInt 注册表相关bpx RegCreateKeybpx RegDeleteKeybpx RegQueryvaluebpx RegCloseKeybpx RegOpenKey 注册标志相关bpx cs:eip if EAX&#x3D;&#x3D;0 内存标准相关bpmb cs:eip rw if 0x30:0x45AA&#x3D;&#x3D;0 显示相关bpx 0x30:0x45AA do “d 0x30:0x44BB”bpx CS:0x66CC do “? EAX”查找窗口FindWindowABP SetFilePointer bpx hmemcpy ;破解万能断点，拦截内存拷贝动作(注意：Win9x专用断点)bpx Lockmytask ;当你用其它断点都无效时可以试一下，这个断点拦截按键的动作(Win9x专用) 实在找不到断点可以试下面的方法：bmsg handle wm_gettext ;拦截注册码（handle为对应窗口的句柄）bmsg handle wm_command ;拦截OK按钮（handle为对应窗口的句柄） 拦截窗口：bpx CreateWindow ;创建窗口bpx CreateWindowEx(A&#x2F;W) ;创建窗口bpx ShowWindow ;显示窗口bpx UpdateWindow ;更新窗口bpx GetWindowText(A&#x2F;W) ;获取窗口文本 拦截消息框：bpx MessageBox(A&#x2F;W) ;创建消息框bpx MessageBoxExA(W) ;创建消息框bpx MessageBoxIndirect(A&#x2F;W) ;创建定制消息框拦截警告声：bpx MessageBeep ;发出系统警告声(如果没有声卡就直接驱动系统喇叭发声)拦截对话框：bpx DialogBox ;创建模态对话框bpx DialogBoxParam(A&#x2F;W) ;创建模态对话框bpx DialogBoxIndirect ;创建模态对话框bpx DialogBoxIndirectParam(A&#x2F;W) ;创建模态对话框bpx CreateDialog ;创建非模态对话框bpx CreateDialogParam(A&#x2F;W) ;创建非模态对话框bpx CreateDialogIndirect ;创建非模态对话框bpx CreateDialogIndirectParam(A&#x2F;W) ;创建非模态对话框bpx GetDlgItemText(A&#x2F;W) ;获取对话框文本bpx GetDlgItemInt ;获取对话框整数值拦截剪贴板：bpx GetClipboardData ;获取剪贴板数据拦截注册表：bpx RegOpenKey(A&#x2F;W) ;打开子健 ( 例：bpx RegOpenKey(A) if (esp-&gt;8)&#x3D;&#x3D;’‘ )bpx RegOpenKeyExA(W) ;打开子健 ( 例：bpx RegOpenKeyEx if (esp-&gt;8)&#x3D;&#x3D;’‘ )bpx RegQueryValue(A&#x2F;W) ;查找子健 ( 例：bpx RegQueryValue(A) if (esp-&gt;8)&#x3D;&#x3D;’‘ )bpx RegQueryValueEx(A&#x2F;W) ;查找子健 ( 例：bpx RegQueryValueEx if (esp-&gt;8)&#x3D;&#x3D;’‘ )bpx RegSetValue(A&#x2F;W) ;设置子健 ( 例：bpx RegSetValue(A) if (esp-&gt;8)&#x3D;&#x3D;’‘ )bpx RegSetValueEx(A&#x2F;W) ;设置子健 ( 例：bpx RegSetValueEx(A) if (esp-&gt;8)&#x3D;&#x3D;’‘ )注意:’‘为指定子键名的前4个字符，如子键为’Regcode’，则’‘&#x3D; ‘Regc’ 功能限制拦截断点：bpx EnableMenuItem ;禁止或允许菜单项bpx EnableWindow ;禁止或允许窗口bmsg hMenu wm_command ;拦截菜单按键事件，其中hMenu为菜单句柄bpx K32Thk1632Prolog ;配合bmsg hMenu wm_command使用，可以通过这个断点进入菜单处理程序应用示例：CALL [KERNEL32!K32Thk1632Prolog]CALL [……] &lt;– 由此跟踪进入菜单处理程序CALL [KERNEL32!K32Thk1632Epilog] 拦截时间：bpx GetLocalTime ;获取本地时间bpx GetSystemTime ;获取系统时间bpx GetFileTime ;获取文件时间bpx GetTickCount ;获得自系统成功启动以来所经历的毫秒数bpx GetCurrentTime ;获取当前时间（16位）bpx SetTimer ;创建定时器bpx TimerProc ;定时器超时回调函数拦截文件：bpx CreateFileA(W) ;创建或打开文件 (32位)bpx OpenFile ;打开文件 (32位)bpx ReadFile ;读文件 (32位)bpx WriteFile ;写文件 (32位)bpx _lcreat ;创建或打开文件 (16位)bpx _lopen ;打开文件 (16位)bpx _lread ;读文件 (16位)bpx _lwrite ;写文件 (16位)bpx _hread ;读文件 (16位)bpx _hwrite ;写文件 (16位)拦截驱动器：bpx GetDrivetype(A&#x2F;W) ;获取磁盘驱动器类型bpx GetLogicalDrives ;获取逻辑驱动器符号bpx GetLogicalDriveStringsA(W) ;获取当前所有逻辑驱动器的根驱动器路径拦截狗：bpio -h 378(或278、3BC) R ;378、278、3BC是并行打印端口bpio -h 3F8(或2F8、3E8、2E8) R ;3F8、2F8、3E8、2E8是串行端口VB程序专用断点：bpx msvbvm60!rtcMsgBoxbpx msvbvm60!__vbaStrCmpbpx msvbvm60!__vbaStrCompbpx msvbvm60!__vbaStrCompVarbpx msvbvm60!__vbaStrTextCmpbpx msvbvm60!__vbaFileOpenbpx msvbvm60!__vbaInputFilebpx msvbvm60!__vbaFileSeekbpx msvbvm60!__vbaWriteFilebpx msvbvm60!__vbaFileClosebpx msvbvm60!rtcFileAttributesbpx msvbvm60!rtcFileDateTimebpx msvbvm60!rtcFileLenbpx msvbvm60!rtcFileLengthbpx msvbvm60!__vbaVarIntbpx msvbvm60!__vbaVarCmpGebpx msvbvm60!__vbaVarCmpGtbpx msvbvm60!__vbaVarCmpLebpx msvbvm60!__vbaVarCmpLtbpx msvbvm60!__vbaVarCmpNebpx msvbvm60!__vbaVarTextCmpEqbpx msvbvm60!__vbaVarTextCmpGebpx msvbvm60!__vbaVarTextCmpGtbpx msvbvm60!__vbaVarTextCmpLebpx msvbvm60!__vbaVarTextCmpLtbpx msvbvm60!__vbaVarTextCmpNebpx msvbvm60!__vbaVarTextTstEqbpx msvbvm60!__vbaVarTextTstGebpx msvbvm60!__vbaVarTextTstGtbpx msvbvm60!__vbaVarTextTstLebpx msvbvm60!__vbaVarTextTstLtbpx msvbvm60!__vbaVarTextTstNebpx msvbvm60!__vbaVarTstEqbpx msvbvm60!__vbaVarTstGebpx msvbvm60!__vbaVarTstGtbpx msvbvm60!__vbaVarTstLebpx msvbvm60!__vbaVarTstLtbpx msvbvm60!__vbaVarTstNe注意：VB程序仍然可以使用普通API函数，只要函数“最终”CALL了这个函数上面的断点对应VB6程序，如果是VB5程序则将msvbvm60改成msvbvm50即可","tags":[{"name":"x64dbg","slug":"x64dbg","permalink":"https://blog.bidd.net/tags/x64dbg/"}]},{"title":"C#指定dll加载路径","date":"2019-04-18T02:29:09.000Z","path":"2019/04/18/509afdeff4af/","text":"多个dll分文件夹存放，保证程序能正常加载 1234567891011121314[DllImport(&quot;kernel32.dll&quot;, CharSet = CharSet.Auto, SetLastError = true)]private static extern bool SetDllDirectory(string path);//启动时调用var path = Path.GetDirectoryName(Assembly.GetEntryAssembly().Location);path = Path.Combine(path, Environment.Is64BitProcess ? &quot;x64&quot; : &quot;x86&quot;);SetDllDirectory(path);//遍历子文件夹DirectoryInfo modulePath = new DirectoryInfo(path);DirectoryInfo[] dirSub=modulePath.GetDirectories();foreach (DirectoryInfo directoryInfo in dirSub) &#123; var temp = Path.Combine(path, directoryInfo.ToString()); SetDllDirectory(temp);&#125;","tags":[{"name":"dll","slug":"dll","permalink":"https://blog.bidd.net/tags/dll/"}]},{"title":"免费证书LetEncrypt申请","date":"2019-04-04T02:24:45.000Z","path":"2019/04/04/5612b7135287/","text":"Let’s Encrypt 是一个由非营利性组织 互联网安全研究小组（ISRG）提供的免费、自动化和开放的证书颁发机构（CA）。 简单的说，借助 Let’s Encrypt 颁发的证书可以为我们的网站免费启用 HTTPS(SSL&#x2F;TLS) 。 嗯，重要的是免费 安装 acme.sh curl https://get.acme.sh | sh 然后切换到目录cd .acme.sh 生成证书 .&#x2F;acme.sh –issue -d bidd.net -d blog.bidd.net –nginx 安装证书 .&#x2F;acme.sh –installcert -d bidd.net -d blog.bidd.net –key-file &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;bidd.net&#x2F;privkey.pem –fullchain-file &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;bidd.net&#x2F;fullchain.pem –reloadcmd “service nginx force-reload” 完成acme会定期检查续期证书","tags":[{"name":"https","slug":"https","permalink":"https://blog.bidd.net/tags/https/"}]},{"title":"C#内嵌dll方法","date":"2018-12-13T09:53:28.000Z","path":"2018/12/13/6dd28a05a0bc/","text":"转载修改自https://blog.csdn.net/lin381825673/article/details/39122257 添加Resources1、双击Properties&#x2F;Resources.resx2、添加资源，选择dll文件 添加加载代码在主窗体代码初始化之前添加如下代码 1234567891011121314public MainWindow()&#123; AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(CurrentDomain_AssemblyResolve); InitializeComponent();&#125;Assembly CurrentDomain_AssemblyResolve(object sender, ResolveEventArgs args)&#123; string dllName = args.Name.Contains(&quot;,&quot;) ? args.Name.Substring(0, args.Name.IndexOf(&#x27;,&#x27;)) : args.Name.Replace(&quot;.dll&quot;, &quot;&quot;); dllName = dllName.Replace(&quot;.&quot;, &quot;_&quot;); if (dllName.EndsWith(&quot;_resources&quot;)) return null; ResourceManager rm = new ResourceManager(GetType().Namespace + &quot;.Properties.Resources&quot;, Assembly.GetExecutingAssembly()); byte[] bytes = (byte[])rm.GetObject(dllName); return Assembly.Load(bytes);&#125;","tags":[{"name":"dll","slug":"dll","permalink":"https://blog.bidd.net/tags/dll/"}]},{"title":"faceRecognition人脸识别","date":"2018-09-05T07:21:56.000Z","path":"2018/09/05/2252f19b73a1/","text":"总有些东西需要存 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107# -*- coding:utf-8 -*-import cv2import threadingimport face_recognitionimport osimport sysimport ctypesclass watchdog(threading.Thread): def __init__(self): threading.Thread.__init__(self) self.video_capture = cv2.VideoCapture(0) self.jump = True self.stop = True # 已知人脸编码及名字 # biden_image = face_recognition.load_image_file(&quot;biden.jpg&quot;) # biden_face_encoding = face_recognition.face_encodings(biden_image)[0] self.known_face_encodings = [] self.known_face_names = [] self.dll = ctypes.WinDLL(&#x27;user32.dll&#x27;) self.load_faces() def run(self): num = 0 while self.stop: ret, frame = self.video_capture.read() # 调整大小为1/4，加速人脸识别 small_frame = cv2.resize(frame,(0,0),fx=0.25,fy=0.25) # 将图像从bgr颜色（opencv使用）转换为rgb颜色（face_recognition使用） rgb_small_frame = small_frame[:,:,::-1] if self.jump: face_locations,face_names = self.face_detection(rgb_small_frame) result_frame = self.result_processing(frame,face_locations,face_names) if len(face_names) &gt; 0: for fn in face_names: if fn == &#x27;Who are you?&#x27;: num += 1 else: num = 0 if num &gt;= 10: self.dll.LockWorkStation() num = 0 # 跳一帧 self.jump = not self.jump cv2.imshow(&#x27;Video&#x27;, result_frame) if cv2.waitKey(1) &amp; 0xFF == ord(&#x27;q&#x27;): break self.video_capture.release() cv2.destroyAllWindows() def load_faces(self): &quot;&quot;&quot; 获取本地所有已存在人脸，一张图片一张脸，文件名称为姓名 &quot;&quot;&quot; path = sys.path[0] + &#x27;/face/&#x27; if not os.path.exists(path): os.mkdir(path) files = os.listdir(path) for f in files: fpath = path+f if os.path.isfile(fpath): if f[-3:].lower() == &#x27;jpg&#x27; or f[-3:].lower() == &#x27;jpeg&#x27;: biden_image = face_recognition.load_image_file(fpath) biden_face_encoding = face_recognition.face_encodings(biden_image)[0] self.known_face_encodings.append(biden_face_encoding) self.known_face_names.append(&#x27;.&#x27;.join(fpath.split(&#x27;/&#x27;)[-1].split(&#x27;.&#x27;)[:-1])) pass def face_detection(self,rgb_small_frame): # 获取人脸位置及面部编码 face_locations = face_recognition.face_locations(rgb_small_frame) face_encodings = face_recognition.face_encodings(rgb_small_frame,face_locations) face_names = [] for face_encoding in face_encodings: # 与已知面部编码匹配 matches = face_recognition.compare_faces(self.known_face_encodings,face_encoding) name = &#x27;Who are you?&#x27; if True in matches: first_match_index = matches.index(True) name = self.known_face_names[first_match_index] face_names.append(name) return face_locations,face_names def result_processing(self,frame,face_locations,face_names): &quot;&quot;&quot; 结果处理 &quot;&quot;&quot; for (top,right,bottom,left), name in zip(face_locations,face_names): # 缩放面部位置，因为帧率在前面缩放了1/4 top *= 4 right *= 4 bottom *= 4 left *= 4 # 画一个方框 cv2.rectangle(frame,(left,top),(right,bottom),(0,0,255),2) # 在底部画上名称 cv2.rectangle(frame,(left,bottom-35),(right,bottom),(0,0,255),cv2.FILLED) font = cv2.FONT_HERSHEY_DUPLEX cv2.putText(frame,name,(left + 6,bottom -6),font,1.0,(255,255,255),1) return frameif __name__ == &#x27;__main__&#x27;: wd = watchdog() wd.start() wd.join() pass","tags":[{"name":"faceRecognition","slug":"faceRecognition","permalink":"https://blog.bidd.net/tags/faceRecognition/"}]},{"title":"OpenCv运动物体检测","date":"2018-09-05T07:15:46.000Z","path":"2018/09/05/8900a17c559d/","text":"总有些东西需要存 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576# -*- coding:utf-8 -*- ##################################### Author dream10201 ## E-mail 201269807@qq.com ## Created Time 2018/09/05 14:44:16 #####################################import argparseimport datetimeimport imutilsimport timeimport cv2# 打开摄像头camera = cv2.VideoCapture(0)# 初始化视频流第一帧firstFrame = None# 遍历视频的每一帧while True: # 获取当前帧并初始化occupied/unoccupied文本 grabbed, frame_original = camera.read() text = &quot;Unoccupied&quot; # 如果不能抓取到一帧，说明我们到了视频的结尾 if not grabbed: break # 调整该帧的大小，转换为灰阶图像并且对其进行高斯模糊 frame = imutils.resize(frame_original, width=500) gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY) gray = cv2.GaussianBlur(gray, (21, 21), 0) # 如果第一帧是None，对其进行初始化 if firstFrame is None: firstFrame = gray continue # 计算当前帧和第一帧的不同 frameDelta = cv2.absdiff(firstFrame, gray) thresh = cv2.threshold(frameDelta, 25, 255, cv2.THRESH_BINARY)[1] # 扩展阀值图像填充孔洞，然后找到阀值图像上的轮廓 thresh = cv2.dilate(thresh, None, iterations=30) binary,contours,hierarchy = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE) # 遍历轮廓 for c in contours: # if the contour is too small, ignore it print(cv2.contourArea(c)) #if cv2.contourArea(c) &lt; args[&quot;min_area&quot;]: # continue # compute the bounding box for the contour, draw it on the frame, # and update the text # 计算轮廓的边界框，在当前帧中画出该框 (x, y, w, h) = cv2.boundingRect(c) cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2) text = &quot;Occupied&quot; #cv2.imwrite(&#x27;img/&#x27;+str(time.time())+&quot;.jpg&quot;,frame_original) # 在当前帧上写文字以及时间戳 cv2.putText(frame, &quot;Room Status: &#123;&#125;&quot;.format(text), (10, 20), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 2) cv2.putText(frame, datetime.datetime.now().strftime(&quot;%A %d %B %Y %I:%M:%S%p&quot;), (10, frame.shape[0] - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.35, (0, 0, 255), 1) #显示当前帧并记录用户是否按下按键 cv2.imshow(&quot;Security Feed&quot;, frame) cv2.imshow(&quot;Thresh&quot;, thresh) cv2.imshow(&quot;Frame Delta&quot;, frameDelta) if cv2.waitKey(1) &amp; 0xFF == ord(&#x27;q&#x27;): break firstFrame = gray# 清理摄像机资源并关闭打开的窗口camera.release()cv2.destroyAllWindows()","tags":[{"name":"opencv","slug":"opencv","permalink":"https://blog.bidd.net/tags/opencv/"}]},{"title":"编译安装opencv","date":"2018-09-04T01:12:44.000Z","path":"2018/09/04/067eff777463/","text":"总有些坑需要记 日常更新123apt-get updateapt-get upgrade -yrpi-update 安装构建工具1apt-get install build-essential cmake git pkg-config -y 安装图像处理工具12345678// 安装jpeg格式图像工具包apt-get install libjpeg8-dev // 安装tif格式图像工具包apt-get install libtiff5-dev // 安装JPEG-2000图像工具包apt-get install libjasper-dev // 安装png图像工具包apt-get install libpng12-dev 安装视频I&#x2F;O包1apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev 安装gtk2.01apt-get install libgtk2.0-dev 以及优化函数包1apt-get install libatlas-base-dev gfortran 下载源码 opencvhttps://github.com/opencv/opencv/releasesopencv_contribhttps://github.com/opencv/opencv_contrib/releases版本要对应，解压…进入cd opencv-3.4.1新建release文件夹mkdir release进入release文件夹cd release 123456789101112/** CMAKE_BUILD_TYPE是编译方式* CMAKE_INSTALL_PREFIX是安装目录* OPENCV_EXTRA_MODULES_PATH是加载额外模块* INSTALL_PYTHON_EXAMPLES是安装官方python例程* BUILD_EXAMPLES是编译例程（这两个可以不加，不加编译稍微快一点点，想要C语言的例程的话，在最后一行前加参数INSTALL_C_EXAMPLES=ON \\）**/cmake -D CMAKE_BUILD_TYPE=RELEASE \\ -D CMAKE_INSTALL_PREFIX=/usr/local \\ -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib-3.4.1/modules \\ -D INSTALL_PYTHON_EXAMPLES=ON \\ -D BUILD_EXAMPLES=ON .. 123456// 编译make// 安装make install// 更新动态链接库ldconfig","tags":[{"name":"opencv","slug":"opencv","permalink":"https://blog.bidd.net/tags/opencv/"}]},{"title":"音频频率和振幅分析","date":"2018-08-01T08:00:25.000Z","path":"2018/08/01/a231a570de32/","text":"以备不时之需 频率和振幅1234567891011121314151617181920212223import pylab as plimport numpy as npfrom scipy.io import wavfilesampFreq, snd = wavfile.read(&#x27;test.wav&#x27;)snd = snd / (2. ** 15)s1 = snd # [:,0] 双声道n = len(s1)p = pl.fft(s1)nUniquePts = int(np.ceil((n + 1) / 2.0))p = p[0:nUniquePts]p = abs(p)p = p / float(n)p = p ** 2if n % 2 &gt; 0: p[1:len(p)] = p[1:len(p)] * 2else: p[1:len(p) - 1] = p[1:len(p) - 1] * 2freqArray = pl.arange(0, nUniquePts, 1.0) * (sampFreq / n)y = 10 * np.log10(p)pl.plot(freqArray,y, linewidth=1, color=color)pl.show() 波形图1234567891011121314151617181920212223242526272829303132f = wave.open(filename, &quot;rb&quot;)# 读取格式信息# (nchannels, sampwidth, framerate, nframes, comptype, compname)# 声道数, 量化位数(byte单位), 采样频率, 采样点数, 压缩类型, 压缩类型的描述params = f.getparams()nchannels, sampwidth, framerate, nframes = params[:4]# 读取波形数据str_data = f.readframes(nframes)f.close()# 将波形数据转换为数组wave_data = np.frombuffer(str_data, dtype=np.short)time = np.arange(0, nframes) * (1.0 / framerate)if nchannels == 2: wave_data.shape = -1, 2 # transpose wave_data = wave_data.T # 绘制波形 pl.subplot(211) pl.plot(time, wave_data[0]) pl.subplot(212) pl.plot(time, wave_data[1], c=&quot;g&quot;)else: pl.subplot(211) pl.plot(time, wave_data) pl.subplot(212) pl.specgram(wave_data, 1024, framerate) # pl.subplot(212) # nf = np.fft.fft(wave_data) # pl.plot(time,nf)pl.show()","tags":[{"name":"python","slug":"python","permalink":"https://blog.bidd.net/tags/python/"}]},{"title":"抖音去广告及下载视频无水印","date":"2018-06-29T01:33:00.000Z","path":"2018/06/29/f3a806089810/","text":"逆向真不是个煎蛋的事，对于我这种小白来说更加了，整了三天才整出来 参考文章 【实战破解】修改抖音无水印这个方法不完美，因为抖音做了判断，如果服务器上没有带水印的视频，则在本地添加，解决方法在下面 Android逆向之旅—破解过滤掉某音短视频的广告和视频水印问题基于Xposed，我手机没root，不过学到了他的顺藤摸瓜大法。 去水印在线水印的参照上面的方法，本地去除只需要将isHasWaterMark()这个方法直接return true;就行了 去广告参考文章的去广告需要root，没root不好整，在Aweme这个类中有个isAd()方法，根据这个方法顺藤摸瓜找到FeedFetchModel这个类，然后发现了一段代码 123456789for (size = feedItemList.getItems().size() - 1; size &gt;= 0; size--) &#123; aweme = (Aweme) feedItemList.getItems().get(size); if (aweme != null &amp;&amp; aweme.isAd()) &#123; if (!aweme.getAwemeRawAd().checkHide(&quot;feed_download_ad&quot;)) &#123; break; &#125; feedItemList.getItems().remove(size); &#125;&#125; 抖音自带的广告删除？？？，应该是避免一些情况做的处理，所以，直接将第二个条件去掉，只要是广告就删除，完美还一个启动广告，在MainActivity里面，有一句goSchema();，将这个去掉就不会有了，里面还有一个同盾数据收集，同样去掉最好 注意：修改后无法通过调用QQ登录，可使用手机号登录（因为反编译破坏签名）","tags":[{"name":"逆向","slug":"逆向","permalink":"https://blog.bidd.net/tags/%E9%80%86%E5%90%91/"}]},{"title":"Linux Hexo搭建","date":"2018-06-15T03:20:00.000Z","path":"2018/06/15/524a2c691382/","text":"记下备忘，windows下用的比特萌的HEXO Portable，所以尝试在Linux上部署一个 Git1apt-get install git nodejs123456789101112//导出源码git clone git@github.com:nodejs/node.gitcd node//检查环境./configure//编译make//安装make install//检测node -vnpm -v hexo12345npm install hexo-cli -g//初始化hexo init blogcd blognpm install dependencies1234567891011//主题默认使用 less 作为 css 预处理工具。npm install hexo-renderer-less --save//用于生成 rss。npm install hexo-generator-feed --save//用于生成静态站点数据，用作站内搜索的数据源。npm install hexo-generator-json-content --save//用于生成微信二维码npm install hexo-helper-qrcode --savenpm install hexo-deployer-git --savenpm install hexo-generator-sitemap --save npm install hexo-generator-baidu-sitemap --save 也可以编辑package.json添加依赖12345//这些我不知道名字，所以直接添加依赖了，用于压缩html文件 &quot;gulp&quot;: &quot;^3.9.1&quot;, &quot;gulp-htmlclean&quot;: &quot;^2.7.14&quot;, &quot;gulp-htmlmin&quot;: &quot;^3.0.0&quot;, &quot;gulp-uglify&quot;: &quot;^3.0.0&quot; 执行npm install安装依赖 最后检查github和coding的ssh秘钥是否添加及正确有效执行命令测试 123hexo cleanhexo ghexo d","tags":[{"name":"hexo","slug":"hexo","permalink":"https://blog.bidd.net/tags/hexo/"}]},{"title":"树莓派编译安装opencv3.4.1","date":"2018-03-26T00:23:00.000Z","path":"2018/03/26/f0fcb10078af/","text":"树莓派官方源中是有opencv的，可以直接通过apt-get install python-opencv来安装，但是只支持python2使用，版本也不够新，所以只好自己编译了，这记下编译过程。 准备OpenCv官方GitHub地址：https://github.com/opencvOpenCv官网地址：http://opencv.org 升级你的树莓派 &#x2F;&#x2F;软件源更新sudo apt-get update&#x2F;&#x2F;升级本地所有安装包sudo apt-get upgrade&#x2F;&#x2F;升级树莓派固件sudo rpi-update 下载OpenCV源代码 wget -c https://github.com/opencv/opencv/archive/3.4.1.tar.gz&#x2F;&#x2F;或者git clone https://github.com/opencv/opencv.git 安装构建OpenCV的相关工具 &#x2F;&#x2F;安装build-essential、cmake、git和pkg-configsudo apt-get install build-essential cmake git pkg-config 安装常用图像工具包 &#x2F;&#x2F;安装jpeg格式图像工具包sudo apt-get install libjpeg8-dev&#x2F;&#x2F;安装tif格式图像工具包sudo apt-get install libtiff5-dev&#x2F;&#x2F;安装JPEG-2000图像工具包sudo apt-get install libjasper-dev&#x2F;&#x2F;安装png图像工具包sudo apt-get install libpng12-dev 安装视频I&#x2F;O包 sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev 安装gtk2.0 sudo apt-get install libgtk2.0-dev 安装依赖关系优化OpenCV apt-get install libatlas-base-dev gfortran 准备编译如果下载的是压缩包，则先解压，然后进入opencv目录。创建release文件夹 mkdir release&#x2F;&#x2F;进入release文件夹cd release 设置cmake编译参数，安装目录默认为&#x2F;usr&#x2F;local &#x2F;&#x2F;CMAKE_BUILD_TYPE是编译方式，CMAKE_INSTALL_PREFIX是安装目录cmake -D CMAKE_BUILD_TYPE&#x3D;RELEASE \\ -D CMAKE_INSTALL_PREFIX&#x3D;&#x2F;usr&#x2F;local .. 开始编译 &#x2F;&#x2F;编译sudo make 安装 make install&#x2F;&#x2F;更新动态链接库ldconfig 简单测试 python3import cv2;cv2.version&#x2F;&#x2F;将输出opencv版本号","tags":[{"name":"笔记","slug":"笔记","permalink":"https://blog.bidd.net/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"树莓派安装Nginx+PHP7+MySQL(MariaDB)","date":"2018-03-20T14:58:00.000Z","path":"2018/03/20/790ff870b980/","text":"安装Nginx我安装的是lite版官方镜像，默认预装了Apache2，所以这里先卸载Apache2，然后安装Nginx apt-get remove –purge apache* -yapt-get autoremove –purge -yapt-get install nginx 安装PHP7及插件 apt-get install php7.0 php7.0-fpm php7.0-mysql php7.0-common 安装MySQL(MariaDB)反正差不多，就直接用了 apt-get install mysql-server 查看Nginx连接到php服务的形式这里主要是查看连接形式是tcp模式还是socket模式。找到www.conf文件,位置：&#x2F;etc&#x2F;php&#x2F;7.0&#x2F;fpm&#x2F;pool.d&#x2F;找到listen &#x3D;这一行,如果是xxx.sock则是socket模式，如果是27.0.0.1则是TCP模式，可自行更改 配置Nginx路径：&#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;找到对应的行数，该加的加，该改的改，可百度更加详细的配置 index index.phplocation ~ .php$ { include snippets&#x2F;fastcgi-php.conf; root &#x2F;var&#x2F;www&#x2F;html; # With php-fpm (or other unix sockets): fastcgi_pass unix:&#x2F;var&#x2F;run&#x2F;php&#x2F;php7.0-fpm.sock; # With php-cgi (or other tcp sockets): #fastcgi_pass 127.0.0.1:9000; #因为我使用的是socket模式，所以注释这一句} 配置MySQL(MariaDB)首先解决远程问题编辑&#x2F;etc&#x2F;mysql&#x2F;mariadb.conf.d&#x2F;50-server.cnf文件，将bind-address &#x3D; 127.0.0.1改为bind-address &#x3D; 0.0.0.0 修改密码控制台输入mysql -u root进入mysql控制台输入命令修改密码 use mysql;update user set authentication_string&#x3D;password(‘123456’) where user&#x3D;’root’; 如果远程还是无法登陆的话，尝试如下 update user set host &#x3D; ‘%’ where user &#x3D; ‘root’;update user set plugin&#x3D;’mysql_native_password’ where user&#x3D;’root’; 最后重启服务","tags":[{"name":"笔记","slug":"笔记","permalink":"https://blog.bidd.net/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"Linux 开启 TCP BBR","date":"2018-01-22T09:53:00.000Z","path":"2018/01/22/276dcd9f280b/","text":"检查内核版本Linux Kernel内核需4.9，过低的升级内核吧查看内核版本命令： uname -a 修改系统变量 vi &#x2F;etc&#x2F;sysctl.conf 在最后加入如下两段： net.core.default_qdisc&#x3D;fqnet.ipv4.tcp_congestion_control&#x3D;bbr 保存后使其生效 sysctl -p 执行命令 sysctl net.ipv4.tcp_available_congestion_control 输出类似于下面内容就成功开启了 sysctl net.ipv4.tcp_available_congestion_controlnet.ipv4.tcp_available_congestion_control &#x3D; bbr cubic reno","tags":[{"name":"bbr","slug":"bbr","permalink":"https://blog.bidd.net/tags/bbr/"}]},{"title":"树莓派音频接口噪音解决方案","date":"2017-11-04T08:45:00.000Z","path":"2017/11/04/79aaf10bce79/","text":"有些人说没噪音，有些人说有噪音，然后就分不清是自己的派有问题还是其它原因。 首先，以为树莓派的那个耳机接口是AUX接口，其实人家是AV接口，也就是Audio和Video，它可以输出音频和视频信号。AV接口分美标和国标，树莓派是美标的，所以国内很多耳机都不能用，国标和美标的区别就是地线和麦克线是反的。那些能用的估计是用的美标的或者是将麦克风和地线接在一起的耳机。说到这里，那么问题就很明显了，这里提供三种解决方案，仅供参考！ 方案一直接想办法把自己耳机的地线和麦克线接在一起（耳机底部的两个金属块）这个挺麻烦的，不推荐 方案二淘宝买一个转接口，搜索关键字“美标转国标”,随便买一个。 方案三淘宝买一个“一分二”的电脑耳麦分线器，可以把audio和video分开，耳机插在audio上就可以了","tags":[{"name":"audio","slug":"audio","permalink":"https://blog.bidd.net/tags/audio/"}]},{"title":"linux计划任务crontab用法","date":"2017-11-04T04:30:00.000Z","path":"2017/11/04/9ed21ef0ef30/","text":"crontab命令crontab命令被用来提交和管理用户的需要周期性执行的任务，与windows下的计划任务类似，当安装完成操作系统后，默认会安装此服务工具，并且会自动启动crond进程，crond进程每分钟会定期检查是否有要执行的任务，如果有要执行的任务，则自动执行该任务。 语法crontab(选项)(参数) 选项 -e：编辑该用户的计时器设置；-l：列出该用户的计时器设置；-r：删除该用户的计时器设置；-u&lt;用户名称&gt;：指定要设定计时器的用户名称。 参数crontab文件：指定包含待执行任务的crontab文件。 实例crontab -e每1分钟执行一次command * * * * * command 每小时的第3和第15分钟执行 3,15 * * * * command 在上午8点到11点的第3和第15分钟执行 3,15 8-11 * * * command 每隔两天的上午8点到11点的第3和第15分钟执行 3,15 8-11 *&#x2F;2 * * command 每个星期一的上午8点到11点的第3和第15分钟执行 3,15 8-11 * * 1 command 每晚的21:30重启smb 30 21 * * * &#x2F;etc&#x2F;init.d&#x2F;smb restart 每月1、10、22日的4 : 45重启smb 45 4 1,10,22 * * &#x2F;etc&#x2F;init.d&#x2F;smb restart 每周六、周日的1:10重启smb 10 1 * * 6,0 &#x2F;etc&#x2F;init.d&#x2F;smb restart 每天18 : 00至23 : 00之间每隔30分钟重启smb 0,30 18-23 * * * &#x2F;etc&#x2F;init.d&#x2F;smb restart 每星期六的晚上11:00 pm重启smb 0 23 * * 6 &#x2F;etc&#x2F;init.d&#x2F;smb restart 每一小时重启smb * *&#x2F;1 * * * &#x2F;etc&#x2F;init.d&#x2F;smb restart 晚上11点到早上7点之间，每隔一小时重启smb * 23-7&#x2F;1 * * * &#x2F;etc&#x2F;init.d&#x2F;smb restart 每月的4号与每周一到周三的11点重启smb 0 11 4 * mon-wed &#x2F;etc&#x2F;init.d&#x2F;smb restart 一月一号的4点重启smb 0 4 1 jan * &#x2F;etc&#x2F;init.d&#x2F;smb restart 每小时执行&#x2F;etc&#x2F;cron.hourly目录内的脚本 01 * * * * root run-parts &#x2F;etc&#x2F;cron.hourly 格式： 分钟 小时 几号 月份 星期几 需要执行的命令或者脚本绝对路径0-59 0-23 1-31 1-12 0-7时间为 * 时，表示所有时间段都执行。时间为 a-b 时，表示 a-b 这段时间执行时间为 *&#x2F;n 时，表示每 n 分钟执行一次时间为 a,b,c 时，表示 a、b、c 时间都执行","tags":[{"name":"crontab","slug":"crontab","permalink":"https://blog.bidd.net/tags/crontab/"}]},{"title":"树莓派在线语音合成","date":"2017-11-01T05:34:00.000Z","path":"2017/11/01/c3ab16492310/","text":"网上找了一个百度文本转语音的python脚本，自己转了一份shell，待需。使用之前应当先去申请应用,拿到api_key和api_secert申请地址 http://yuyin.baidu.com/ python版代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#!/usr/bin/python3import urllib.requestimport urllibimport jsonimport base64import subprocessimport sysclass BaiduRest: def __init__(self, cu_id, api_key, api_secert): self.token_url = &quot;https://openapi.baidu.com/oauth/2.0/token?grant_type=client_credentials&amp;client_id=%s&amp;client_secret=%s&quot; self.getvoice_url = &quot;http://tsn.baidu.com/text2audio?tex=%s&amp;lan=zh&amp;cuid=%s&amp;ctp=1&amp;tok=%s&quot; self.upvoice_url = &#x27;http://vop.baidu.com/server_api&#x27; self.cu_id = cu_id self.getToken(api_key, api_secert) return def getToken(self, api_key, api_secert): token_url = self.token_url % (api_key,api_secert) r_str = urllib.request.urlopen(token_url).read() token_data = json.loads(r_str.decode(&#x27;UTF-8&#x27;)) self.token_str = token_data[&#x27;access_token&#x27;] pass def getVoice(self, text, filename): get_url = self.getvoice_url % (urllib.parse.quote(text), self.cu_id, self.token_str) voice_data = urllib.request.urlopen(get_url).read() voice_fp = open(filename,&#x27;wb+&#x27;) voice_fp.write(voice_data) voice_fp.close() pass def getText(self, filename): data = &#123;&#125; data[&#x27;format&#x27;] = &#x27;wav&#x27; data[&#x27;rate&#x27;] = 8000 data[&#x27;channel&#x27;] = 1 data[&#x27;cuid&#x27;] = self.cu_id data[&#x27;token&#x27;] = self.token_str wav_fp = open(filename,&#x27;rb&#x27;) voice_data = wav_fp.read() data[&#x27;len&#x27;] = len(voice_data) data[&#x27;speech&#x27;] = base64.b64encode(voice_data).decode(&#x27;utf-8&#x27;) post_data = json.dumps(data) r_data = urllib.request.urlopen(self.upvoice_url,data=bytes(post_data,encoding=&quot;utf-8&quot;)).read() return json.loads(r_data.decode(&#x27;UTF-8&#x27;))[&#x27;result&#x27;]if __name__ == &quot;__main__&quot;: api_key = &quot;&quot; api_secert = &quot;&quot; txt_parm=sys.argv bdr = BaiduRest(&quot;RaspberryPi&quot;, api_key, api_secert) bdr.getVoice(txt_parm[1], &quot;out.mp3&quot;) #print(bdr.getText(&quot;out.wav&quot;)) shell版代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071#!/bin/bash##################################################### 百度应用的key和secertapi_key=&quot;&quot;api_secert=&quot;&quot;# 缓存文件路径，用于暂存access_token,减少获取次数baidu_config=/tmp/baidu.ini##################################################### 此方法用于获取access_token# return tokengetToken ()&#123; # 获取token的url oauth_url=&quot;https://openapi.baidu.com/oauth/2.0/token?grant_type=client_credentials&amp;client_id=$&#123;api_key&#125;&amp;client_secret=$&#123;api_secert&#125;&quot; # 获取token temp=`curl $&#123;oauth_url&#125;` # 截取access_token temp=$&#123;temp#*\\&#123;\\&quot;access_token\\&quot;\\:\\&quot;&#125; token=$&#123;temp%%\\&quot;*&#125; echo $&#123;token&#125;&#125;# 此方法用于读取配置文件# $1 key# return config valuegetConfig ()&#123; temp=`awk &#x27;$1~/\\[.*/&#123;_cdr_par_=0&#125;\\$0 ~ /^ *\\[ *baidu *\\]/&#123;_cdr_par_=1&#125;\\$0~/^[\\011 ]*&#x27;$1&#x27; *=.*/ &#123; if(_cdr_par_==1) &#123; sub(&quot;=&quot;,&quot; &quot;); print $2; exit 0&#125; &#125;\\&#x27; $&#123;baidu_config&#125;` echo $&#123;temp&#125;&#125;echo &quot;检查配置文件...&quot;if [ ! -f $baidu_config ] ; then echo &quot;初始化配置文件....&quot; echo -e &quot;[baidu]\\ntime=`date +&#x27;%Y-%m-%d#%H:%M:%S&#x27;`\\ntoken=$(getToken)&quot; &gt;&gt;$baidu_configelse # 计算时间是否超过86400秒 echo &quot;检查令牌周期...&quot; time=&quot;$(getConfig time)&quot; time=$&#123;time/\\#/ &#125; endtime=`date +&#x27;%Y-%m-%d %H:%M:%S&#x27;` time=$(date --date=&quot;$time&quot; +%s) endtime=$(date --date=&quot;$endtime&quot; +%s) time_value=$(($endtime - $time)) if [ $time_value -ge 86300 ] ; then echo &quot;令牌过期，重新获得令牌...&quot; echo -e &quot;[baidu]\\ntime=`date +&#x27;%Y-%m-%d#%H:%M:%S&#x27;`\\ntoken=$(getToken)&quot; &gt;$baidu_config fifitoken=$(getConfig token)# 拼接url# 参数说明# vol 音量，默认5，0-15vol=5# per 发音人，默认0，0普通女声，1普通男声，3情感合成-度逍遥，4情感合成-度丫丫per=0# spd 语速，默认5，0-9spd=5# pit 音调，默认5，0-9pit=5voice_url=&quot;http://tsn.baidu.com/text2audio?tex=$&#123;1&#125;&amp;lan=zh&amp;cuid=RaspberryPi&amp;ctp=1&amp;tok=$&#123;token&#125;&amp;vol=$&#123;vol&#125;&amp;per=$&#123;per&#125;&amp;spd=$&#123;spd&#125;&amp;pit=$&#123;pit&#125;&quot;# 播放# 下面命令需sox# apt-get install sox libsox-fmt-mp3play $voice_url 用法替换api_key、api_secert的值shell .&#x2F;audio.sh 你好，度丫丫 python .&#x2F;audio.py 你好,度丫丫play out.mp3","tags":[{"name":"tts","slug":"tts","permalink":"https://blog.bidd.net/tags/tts/"}]},{"title":"shell时间差计算","date":"2017-10-26T04:11:00.000Z","path":"2017/10/26/8e10f84b9498/","text":"starttime&#x3D;date +&#39;%Y-%m-%d %H:%M:%S&#39;#执行程序endtime&#x3D;date +&#39;%Y-%m-%d %H:%M:%S&#39;start_seconds&#x3D;$(date –date&#x3D;”$starttime” +%s);end_seconds&#x3D;$(date –date&#x3D;”$endtime” +%s);echo “本次运行时间： “$((end_seconds-start_seconds))”s” 转载自：http://www.cnblogs.com/leixingzhi7/p/6281675.html","tags":[{"name":"shell","slug":"shell","permalink":"https://blog.bidd.net/tags/shell/"}]},{"title":"shell比较符","date":"2017-10-26T04:11:00.000Z","path":"2017/10/26/4fe74ea1d39f/","text":"整数比较 -eq 等于,如:if [ “$a” -eq “$b” ]-ne 不等于,如:if [ “$a” -ne “$b” ]-gt 大于,如:if [ “$a” -gt “$b” ]-ge 大于等于,如:if [ “$a” -ge “$b” ]-lt 小于,如:if [ “$a” -lt “$b” ]-le 小于等于,如:if [ “$a” -le “$b” ]&lt; 小于(需要双括号),如:((“$a” &lt; “$b”))&lt;&#x3D; 小于等于(需要双括号),如:((“$a” &lt;&#x3D; “$b”))大于(需要双括号),如:((“$a” &gt; “$b”))&#x3D; 大于等于(需要双括号),如:((“$a” &gt;&#x3D; “$b”)) 字符串比较 &#x3D; 等于,如:if [ “$a” &#x3D; “$b” ]&#x3D;&#x3D; 等于,如:if [ “$a” &#x3D;&#x3D; “$b” ],与&#x3D;等价注意:&#x3D;&#x3D;的功能在[[]]和[]中的行为是不同的,如下: [[ $a &#x3D;&#x3D; z* ]] # 如果$a以”z”开头(模式匹配)那么将为true[[ $a &#x3D;&#x3D; “z*” ]] # 如果$a等于z*(字符匹配),那么结果为true[ $a &#x3D;&#x3D; z* ] # File globbing 和word splitting将会发生[ “$a” &#x3D;&#x3D; “z*” ] # 如果$a等于z*(字符匹配),那么结果为true 一点解释,关于File globbing是一种关于文件的速记法,比如”*.c”就是,再如~也是.但是file globbing并不是严格的正则表达式,虽然绝大多数情况下结构比较像. !&#x3D; 不等于,如:if [ “$a” !&#x3D; “$b” ]这个操作符将在[[]]结构中使用模式匹配.&lt; 小于,在ASCII字母顺序下.如:if [[ “$a” &lt; “$b” ]]if [ “$a” &lt; “$b” ]注意:在[]结构中”&lt;”需要被转义. 大于,在ASCII字母顺序下.如:if [[ “$a” &gt; “$b” ]]if [ “$a” &gt; “$b” ]注意:在[]结构中”&gt;”需要被转义.具体参考Example 26-11来查看这个操作符应用的例子.-z 字符串为”null”.就是长度为0.-n 字符串不为”null”","tags":[{"name":"shell","slug":"shell","permalink":"https://blog.bidd.net/tags/shell/"}]},{"title":"shell脚本读取配置文件","date":"2017-10-26T01:11:00.000Z","path":"2017/10/26/c2286c255ef9/","text":"最近在鼓捣树莓派，用到了百度语音服务，其中access-token需要保存下来，所以就需要读取配置。配置文件baidu.ini内容： [baidu]time&#x3D;20171026access_token&#x3D;123456 读取[baidu]下的access_token path&#x3D;&#x2F;home&#x2F;baidu.iniaccess_token&#x3D;awk &#39;$1~/\\[.*/&#123;_cdr_par_=0&#125;\\$0 ~ /^ *\\[ *baidu *\\]/&#123;_cdr_par_=1&#125;\\$0~/^[\\011 ]*access_token *=.*/ &#123; if(_cdr_par_==1) &#123; sub(&quot;=&quot;,&quot; &quot;); print $2; exit 0&#125; &#125;\\&#39; $&#123;path&#125;echo $access_token 输出 123456 或者写一个函数 getconfig $1 file path$2 Section$3 keyreturn keyvaluegetConfig (){temp&#x3D;awk &#39;$1~/\\[.*/&#123;_cdr_par_=0&#125;\\$0 ~ /^ *\\[ *&#39;$2&#39; *\\]/&#123;_cdr_par_=1&#125;\\$0~/^[\\011 ]*&#39;$3&#39; *=.*/ &#123; if(_cdr_par_==1) &#123; sub(&quot;=&quot;,&quot; &quot;); print $2; exit 0&#125; &#125;\\&#39; $&#123;1&#125;echo ${temp}} 调用echo $(getConfig &#x2F;home&#x2F;test.ini baidu token) 转载自:http://blog.csdn.net/zhouzhaoxiong1227/article/details/50273543","tags":[{"name":"shell","slug":"shell","permalink":"https://blog.bidd.net/tags/shell/"}]},{"title":"MySQL5.7解压版安装教程","date":"2017-10-18T09:44:00.000Z","path":"2017/10/18/1f9ab37fb660/","text":"网上坑比较多，整理出来备忘 版本mysql-5.7.20-winx64 从官网下载下来后字节解压出来，找个地方放好 配置 在根目录新建my.ini文件，将配置信息写入注意my.ini文件格式为utf-8不带签名编码也就是不带 BOM 信息 [mysqld] #设置字符集为utf8character_set_server &#x3D; utf8 #开启查询缓存explicit_defaults_for_timestamp&#x3D;true #绑定IPv4和3306端口bind-address &#x3D; 0.0.0.0port &#x3D; 3306 设置mysql的安装目录（这里根据自身条件修改）basedir&#x3D;”D:\\mysql-5.7.20-winx64” 设置mysql数据库的数据的存放目录（这里根据自身条件修改）datadir&#x3D;”D:\\mysql-5.7.20-winx64\\data” 允许最大连接数max_connections&#x3D;200[client]#设置客户端字符集character_set_client &#x3D; utf8 注意：字符编码配置项default-character-set因改为character-set，应该是弃用了default-character-set，但是网上很多教程都是用default-character-set 新建data文件夹（若是重新开始，需要将data文件夹清空） 管理员cmd进入D:\\mysql-5.7.20-winx64\\bin输入命令初始化： &#x2F;&#x2F;使用-initialize生成随机密码，使用-initialize-insecure生成空密码，默认账号rootmysqld –initialize-insecure –user&#x3D;mysql 安装然后安装服务 mysqld -install&#x2F;&#x2F;Service successfully installed. 最后启动服务 net start MySQL 更改密码改密码方式有多种，这里就只介绍update命令修改密码 用工具连接mysql用户名：root，密码为空执行下面sql use mysql;update user set authentication_string&#x3D;password(‘123456’) where user&#x3D;’root’;&#x2F;&#x2F;改完密码需要重启服务生效 需要注意的是，这个版本中user表中不存在password字段了，改成了authentication_string 重新安装 删除MySQL服务 &#x2F;&#x2F;管理员启动cmdsc delete MySQL&#x2F;&#x2F;MySQL名称若不同需要更改，win+r 输入services.msc查看 清空mysql安装目录data文件夹，注意不要讲data文件夹删除了，只清空data文件夹里面的内容 重新安装，进入安装步骤","tags":[{"name":"mysql","slug":"mysql","permalink":"https://blog.bidd.net/tags/mysql/"}]},{"title":"某电安卓模拟器去广告教程","date":"2017-09-13T12:11:02.000Z","path":"2017/09/13/ca370035b769/","text":"什么模拟器不多说，毕竟目前还是比较良心的一款了，发出来也许只是提醒下官方该注意了吧。 去启动广告及游戏礼包所有exe，或者干脆安装目录下所有文件十六进制，将所能搜索到的 6c0064006d006e0071002e0063006f006d00 替换成 3100320037002e0030002e0030002e003000 2018-07-06 11:45:00 更新测试会导致定位等功能无法使用，改了下，只需要修改 dnplayer.exe 这个文件就可以了python： b &#x3D; b.replace(b’l\\x00d\\x00&#x2F;\\x00l\\x00e\\x00i\\x00d\\x00i\\x00a\\x00n\\x00’,b’0\\x000\\x00&#x2F;\\x000\\x000\\x000\\x000\\x000\\x000\\x000\\x00’) 或者按照规律任意替换就可以了，当然，你可以写个程序，批量 :) 模拟器内部去除内置软件随便下个管理软件（我下的幸运破解器）卸载就OK了","tags":[{"name":"去广告","slug":"去广告","permalink":"https://blog.bidd.net/tags/%E5%8E%BB%E5%B9%BF%E5%91%8A/"}]},{"title":"一个很有意思的访客统计插件","date":"2017-08-04T01:27:24.000Z","path":"2017/08/04/faffeaeaa866/","text":"通过一个3D地球来展示网站访客地域等信息，可至官网自定义功能，这东西还是不错的。 先来一个效果展示 是不是很炫酷，这是revolvermaps提供的访客统计插件，自由、可定制、无注册、安装方便。这里贴上安装代码，需要定制的可到官网去定制生成自己的代码 1&lt;script type=&quot;text/javascript&quot; src=&quot;//rf.revolvermaps.com/0/0/6.js?i=51jupemwlol&amp;amp;m=7&amp;amp;c=e63100&amp;amp;cr1=ffffff&amp;amp;f=arial&amp;amp;l=0&amp;amp;bv=90&amp;amp;lx=-420&amp;amp;ly=420&amp;amp;hi=20&amp;amp;he=7&amp;amp;hc=a8ddff&amp;amp;rs=80&quot; async=&quot;async&quot;&gt;&lt;/script&gt;","tags":[{"name":"统计","slug":"统计","permalink":"https://blog.bidd.net/tags/%E7%BB%9F%E8%AE%A1/"}]},{"title":"PowerShell控制台重置配色命令","date":"2017-08-01T08:12:01.000Z","path":"2017/08/01/e346cda3a55a/","text":"源于默认配色不好看，想自定义配色，但是发现改了默认配色，用Shift+右键打开PowerShell并没有变化，而更改属性中的配色有效果却没法选择我想要的Courier New字体。所以百度出了一条命令，用于重置控制台设置为默认设置 12//PowerShell控制台重置配置[System.Console]::ResetColor()","tags":[{"name":"笔记","slug":"笔记","permalink":"https://blog.bidd.net/tags/%E7%AC%94%E8%AE%B0/"},{"name":"PowerShell","slug":"PowerShell","permalink":"https://blog.bidd.net/tags/PowerShell/"}]},{"title":"正则表达式笔记","date":"2017-07-25T14:05:00.000Z","path":"2017/07/25/4c6d4b756cf6/","text":"记录一些正则表达式，方便查询 匹配字符串中间内容12//匹配标签&lt;id&gt;&lt;/id&gt;中间的内容(?&lt;=&lt;id&gt;).*?(?=&lt;/id&gt;) 待续…","tags":[{"name":"笔记","slug":"笔记","permalink":"https://blog.bidd.net/tags/%E7%AC%94%E8%AE%B0/"},{"name":"正则表达式","slug":"正则表达式","permalink":"https://blog.bidd.net/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"}]},{"title":"svn checkout排除文件或文件夹","date":"2017-07-20T06:15:00.000Z","path":"2017/07/20/79caeb14afe4/","text":"从svn1.5版开始，提供了稀疏目录(Sparse Directories)功能，允许对目录设置深度（depth），这个设置可以保存在工作目录上，以后svn update等命令都在这个设置下工作。 步骤先checkout整个项目工具选择infinity，也可以用命令行的方式： 1svn co --depth infinity https://192.168.1.1/svn/project 命令行排除需要排除的文件或文件夹工具貌似没有，或许是我没找到多个用空格分隔这里排除项目下的.myeclipse文件夹和target文件夹 1svn update --set-depth=exclude project/.myeclipse project/target 完成，重启一下开发工具或者直接去文件夹下，会发现排除的都不见了。 只检出部分目录方法检出项目目录（不包含任何文件和子目录）执行后会生成一个以项目名称结尾的空文件夹，这里生成project文件夹 1svn co --depth empty https://192.168.1.1/svn/project 更新需要检出的文件夹或文件比如我只要src文件夹，命令如下 1svn update --set-depth infinity project/src 这里放上检出深度各选项含义 检出深度你可以选择要检出的深度，它允许你指定子目录递归的深度。如果你只需要大目录中的几个子条目，你可以只检出最高层目录，然后递归的更新选择的目录。 全递归1--depth infinity 检出完整的目录树，包含所有的文件或子目录。 直接节点，包含目录。1--depth immediates 检出目录，包含其中的文件或子目录，但是不递归展开子目录。 文件子节点1--depth files 检出指定目录，包含所有文件，但是不检出任何子目录。 仅此项。1--depth empty 只检出目录。不包含其中的文件或子目录。 工作副本1working copy 保持工作副本指定的深度。此选项不用于检出对话框，但它是其它所有含有深度配置对话框的默认配置。","tags":[{"name":"svn","slug":"svn","permalink":"https://blog.bidd.net/tags/svn/"}]},{"title":"Alpha、Beta、RC、GA版本的区别","date":"2017-07-14T09:28:00.000Z","path":"2017/07/14/48bd6052b6c1/","text":"Alpha：是内部测试版,一般不向外部发布,会有很多Bug.一般只有测试人员使用。 Beta：也是测试版，这个阶段的版本会一直加入新的功能。在Alpha版之后推出。 RC：(Release Candidate) 顾名思义么 ! 用在软件上就是候选版本。系统平台上就是发行候选版本。RC版不会再加入新的功能了，主要着重于除错。 GA:General Availability,正式发布的版本，在国外都是用GA来说明release版本的。 RTM：(Release to Manufacture)是给工厂大量压片的版本，内容跟正式版是一样的，不过RTM版也有出限制、评估版的。但是和正式版本的主要程序代码都是一样的。 OEM：是给计算机厂商随着计算机贩卖的，也就是随机版。只能随机器出货，不能零售。只能全新安装，不能从旧有操作系统升级。包装不像零售版精美，通常只有一面CD和说明书(授权书)。 RVL：号称是正式版，其实RVL根本不是版本的名称。它是中文版&#x2F;英文版文档破解出来的。 EVAL：而流通在网络上的EVAL版，与“评估版”类似，功能上和零售版没有区别。 RTL：Retail(零售版)是真正的正式版，正式上架零售版。在安装盘的i386文件夹里有一个eula.txt，最后有一行EULAID，就是你的版本。比如简体中文正式版是EULAID:WX.4_PRO_RTL_CN，繁体中文正式版是WX.4_PRO_RTL_TW。其中：如果是WX.开头是正式版，WB.开头是测试版。_PRE，代表家庭版；_PRO，代表专业版。 α、β、λ常用来表示软件测试过程中的三个阶段，α是第一阶段，一般只供内部测试使用；β是第二个阶段，已经消除了软件中大部分的不完善之处，但仍有可能还存在缺陷和漏洞，一般只提供给特定的用户群来测试使用；λ是第三个阶段，此时产品已经相当成熟，只需在个别地方再做进一步的优化处理即可上市发行。","tags":[{"name":"版本","slug":"版本","permalink":"https://blog.bidd.net/tags/%E7%89%88%E6%9C%AC/"}]},{"title":"JS给页面添加水印","date":"2017-07-11T09:37:00.000Z","path":"2017/07/11/6268729edfa4/","text":"有些后端管理系统，因为业务逻辑的需要，需要加上水印，下面就是水印方法。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889function watermark(settings) &#123; debugger; //默认设置 var defaultSettings=&#123; watermark_txt:&quot;text&quot;, watermark_x:20,//水印起始位置x轴坐标 watermark_y:20,//水印起始位置Y轴坐标 watermark_rows:20,//水印行数 watermark_cols:20,//水印列数 watermark_x_space:100,//水印x轴间隔 watermark_y_space:50,//水印y轴间隔 watermark_color:&#x27;#aaa&#x27;,//水印字体颜色 watermark_alpha:0.4,//水印透明度 watermark_fontsize:&#x27;15px&#x27;,//水印字体大小 watermark_font:&#x27;微软雅黑&#x27;,//水印字体 watermark_width:210,//水印宽度 watermark_height:80,//水印长度 watermark_angle:15//水印倾斜度数 &#125;; //采用配置项替换默认值，作用类似jquery.extend if(arguments.length===1&amp;&amp;typeof arguments[0] ===&quot;object&quot; ) &#123; var src=arguments[0]||&#123;&#125;; for(key in src) &#123; if(src[key]&amp;&amp;defaultSettings[key]&amp;&amp;src[key]===defaultSettings[key]) continue; else if(src[key]) defaultSettings[key]=src[key]; &#125; &#125; var oTemp = document.createDocumentFragment(); //获取页面最大宽度 var page_width = Math.max(document.body.scrollWidth,document.body.clientWidth); var cutWidth = page_width*0.0150; var page_width=page_width-cutWidth; //获取页面最大高度 var page_height = Math.max(document.body.scrollHeight,document.body.clientHeight)+450; // var page_height = document.body.scrollHeight+document.body.scrollTop; //如果将水印列数设置为0，或水印列数设置过大，超过页面最大宽度，则重新计算水印列数和水印x轴间隔 if (defaultSettings.watermark_cols == 0 || (parseInt(defaultSettings.watermark_x + defaultSettings.watermark_width *defaultSettings.watermark_cols + defaultSettings.watermark_x_space * (defaultSettings.watermark_cols - 1)) &gt; page_width)) &#123; defaultSettings.watermark_cols = parseInt((page_width-defaultSettings.watermark_x+defaultSettings.watermark_x_space) / (defaultSettings.watermark_width + defaultSettings.watermark_x_space)); defaultSettings.watermark_x_space = parseInt((page_width - defaultSettings.watermark_x - defaultSettings.watermark_width * defaultSettings.watermark_cols) / (defaultSettings.watermark_cols - 1)); &#125; //如果将水印行数设置为0，或水印行数设置过大，超过页面最大长度，则重新计算水印行数和水印y轴间隔 if (defaultSettings.watermark_rows == 0 || (parseInt(defaultSettings.watermark_y + defaultSettings.watermark_height * defaultSettings.watermark_rows + defaultSettings.watermark_y_space * (defaultSettings.watermark_rows - 1)) &gt; page_height)) &#123; defaultSettings.watermark_rows = parseInt((defaultSettings.watermark_y_space + page_height - defaultSettings.watermark_y) / (defaultSettings.watermark_height + defaultSettings.watermark_y_space)); defaultSettings.watermark_y_space = parseInt(((page_height - defaultSettings.watermark_y) - defaultSettings.watermark_height * defaultSettings.watermark_rows) / (defaultSettings.watermark_rows - 1)); &#125; var x; var y; for (var i = 0; i &lt; defaultSettings.watermark_rows; i++) &#123; y = defaultSettings.watermark_y + (defaultSettings.watermark_y_space + defaultSettings.watermark_height) * i; for (var j = 0; j &lt; defaultSettings.watermark_cols; j++) &#123; x = defaultSettings.watermark_x + (defaultSettings.watermark_width + defaultSettings.watermark_x_space) * j; var mask_div = document.createElement(&#x27;div&#x27;); mask_div.id = &#x27;mask_div&#x27; + i + j; mask_div.className = &#x27;mask_div&#x27;; mask_div.appendChild(document.createTextNode(defaultSettings.watermark_txt)); //设置水印div倾斜显示 mask_div.style.webkitTransform = &quot;rotate(-&quot; + defaultSettings.watermark_angle + &quot;deg)&quot;; mask_div.style.MozTransform = &quot;rotate(-&quot; + defaultSettings.watermark_angle + &quot;deg)&quot;; mask_div.style.msTransform = &quot;rotate(-&quot; + defaultSettings.watermark_angle + &quot;deg)&quot;; mask_div.style.OTransform = &quot;rotate(-&quot; + defaultSettings.watermark_angle + &quot;deg)&quot;; mask_div.style.transform = &quot;rotate(-&quot; + defaultSettings.watermark_angle + &quot;deg)&quot;; mask_div.style.visibility = &quot;&quot;; mask_div.style.position = &quot;absolute&quot;; mask_div.style.left = x + &#x27;px&#x27;; mask_div.style.top = y + &#x27;px&#x27;; mask_div.style.overflow = &quot;hidden&quot;; mask_div.style.zIndex = &quot;9999&quot;; mask_div.style.pointerEvents=&#x27;none&#x27;;//pointer-events:none 让水印不遮挡页面的点击事件 //mask_div.style.border=&quot;solid #eee 1px&quot;; mask_div.style.opacity = defaultSettings.watermark_alpha; mask_div.style.fontSize = defaultSettings.watermark_fontsize; mask_div.style.fontFamily = defaultSettings.watermark_font; mask_div.style.color = defaultSettings.watermark_color; mask_div.style.textAlign = &quot;center&quot;; mask_div.style.width = defaultSettings.watermark_width + &#x27;px&#x27;; mask_div.style.height = defaultSettings.watermark_height + &#x27;px&#x27;; mask_div.style.display = &quot;block&quot;; oTemp.appendChild(mask_div); &#125;; &#125;; document.body.appendChild(oTemp);&#125; 使用方法 1watermark(&#123;watermark_txt:&#x27;我是水印&#x27;&#125;); 转载自：http://www.cnblogs.com/daixinyu/p/6715398.html","tags":[{"name":"水印","slug":"水印","permalink":"https://blog.bidd.net/tags/%E6%B0%B4%E5%8D%B0/"}]},{"title":"Integer缓存机制","date":"2017-07-10T13:28:00.000Z","path":"2017/07/10/9b12b65cdd84/","text":"四个Integer变量i1、i2赋值128，System.out.println(i1&#x3D;&#x3D;i2)输出falsei3、i4赋值127，System.out.println(i3&#x3D;&#x3D;i4)输出true不是无意中看到，还真不知道有这机制，果断记一笔。 原则上i1&#x3D;&#x3D;i2，i3&#x3D;&#x3D;i4比较的都是其引用的内存地址，应该都是false。但是，java在java5引入了Integer缓存机制，当开发者使用Integer类型时，如果定义的值在（包含）-128127之间时，会将引用直接指向已创建好的缓存对象。i1，i2两个变量在-128127之间，所以两个变量的引用是指向同一个对象实例（内存地址相同），所以返回true，而i3，i4两个变量的值不在-128~127之间，所以jvm分别为这两个自动装箱的对象类型，创建了新的对象实例（内存地址不同），所以返回false。另外，Integer缓存机制的最大值可以通过jvm参数-XX:AutoBoxCacheMax&#x3D;size来调整 缓存行为并不仅仅适用于Integer对象，在所有的整型类型类上都有相似的缓存机制。 ByteCache用于缓存Byte对象 ShortCache用于缓存Short对象 LongCache用于缓存Long对象 CharacterCache用于缓存Character对象Byte、Short、Long有固定的缓存范围，比如在-128和127（包含）之间的值。对于Character类，缓存的范围为0到127（包含），除了Integer外，其他类型的缓存范围不能通过启动参数修改。","tags":[{"name":"Integer","slug":"Integer","permalink":"https://blog.bidd.net/tags/Integer/"}]},{"title":"PhotoSwipe使用笔记","date":"2017-07-06T05:21:00.000Z","path":"2017/07/06/dc5ee1b9880d/","text":"博客换了一套主题，发现没有图片预览的功能，花了点时间整了个全局图片预览插件（PhotoSwipe.js）之所以选择PhotoSwipe.js，是因为它强大的兼容性，对于我这个小站来说，绰绰有余了。 简介官方介绍PhotoSwipe 是专为移动触摸设备设计的相册&#x2F;画廊.兼容所有iPhone、iPad、黑莓6+,以及桌面浏览器.底层实现基于HTML&#x2F;CSS&#x2F;JavaScript,是一款免费开源的相册产品。 为谁而用让移动站点的相册体验和原生App一样的设计师和开发者。 绝佳特性PhotoSwipe提供给用户一个熟悉又直观的相册交互界面。 官方网站http://www.photoswipe.com/ 源码示例http://github.com/downloads/codecomputerlove/PhotoSwipe/code.photoswipe-3.0.5.zip Githubhttps://github.com/codecomputerlove/PhotoSwipe 在线demohttp://www.photoswipe.com/latest/examples/04-jquery-mobile.html 兼容特性PhotoSwipe兼容大量的移动设备以及所有流行的JavaScript类库&#x2F;开发框架. 既有基于jQuery的版本,也有不依赖jQuery的版本，还有兼容jQuery Mobile的版本。当然，All In One，全在源码示例包里。 如何使用PhotoSwipe是一个自身独立的JavaScript库，可以很方便地集成进你的网站。针对移动浏览器(webkit)进行了大量的优化,当然，对于桌面浏览器，以及jQueryMobile，在源码包内也提供了相应的版本. 首先，必要的js，css，html样式及脚本css一般放在head中，js放在底部，将对速度影响至最小 1234&lt;link rel=&quot;stylesheet&quot; href=&quot;photoswipe.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;default-skin/default-skin.css&quot;&gt;&lt;script src=&quot;photoswipe.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;photoswipe-ui-default.min.js&quot;&gt;&lt;/script&gt; html这个不必要改，在body中找个地方粘贴进去就好，这个就是预览时的界面，可压缩一下 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&lt;!-- Root element of PhotoSwipe. Must have class pswp. --&gt;&lt;div class=&quot;pswp&quot; tabindex=&quot;-1&quot; role=&quot;dialog&quot; aria-hidden=&quot;true&quot;&gt; &lt;!-- Background of PhotoSwipe. It&#x27;s a separate element as animating opacity is faster than rgba(). --&gt; &lt;div class=&quot;pswp__bg&quot;&gt; &lt;/div&gt; &lt;!-- Slides wrapper with overflow:hidden. --&gt; &lt;div class=&quot;pswp__scroll-wrap&quot;&gt; &lt;!-- Container that holds slides. PhotoSwipe keeps only 3 of them in the DOM to save memory. Don&#x27;t modify these 3 pswp__item elements, data is added later on. --&gt; &lt;div class=&quot;pswp__container&quot;&gt; &lt;div class=&quot;pswp__item&quot;&gt; &lt;/div&gt; &lt;div class=&quot;pswp__item&quot;&gt; &lt;/div&gt; &lt;div class=&quot;pswp__item&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- Default (PhotoSwipeUI_Default) interface on top of sliding area. Can be changed. --&gt; &lt;div class=&quot;pswp__ui pswp__ui--hidden&quot;&gt; &lt;div class=&quot;pswp__top-bar&quot;&gt; &lt;!-- Controls are self-explanatory. Order can be changed. --&gt; &lt;div class=&quot;pswp__counter&quot;&gt; &lt;/div&gt; &lt;button class=&quot;pswp__button pswp__button--close&quot; title=&quot;Close (Esc)&quot;&gt;&lt;/button&gt; &lt;button class=&quot;pswp__button pswp__button--share&quot; title=&quot;Share&quot;&gt;&lt;/button&gt; &lt;button class=&quot;pswp__button pswp__button--fs&quot; title=&quot;Toggle fullscreen&quot;&gt;&lt;/button&gt; &lt;button class=&quot;pswp__button pswp__button--zoom&quot; title=&quot;Zoom in/out&quot;&gt;&lt;/button&gt; &lt;!-- Preloader demo http://codepen.io/dimsemenov/pen/yyBWoR --&gt; &lt;!-- element will get class pswp__preloader--active when preloader is running --&gt; &lt;div class=&quot;pswp__preloader&quot;&gt; &lt;div class=&quot;pswp__preloader__icn&quot;&gt; &lt;div class=&quot;pswp__preloader__cut&quot;&gt; &lt;div class=&quot;pswp__preloader__donut&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;pswp__share-modal pswp__share-modal--hidden pswp__single-tap&quot;&gt; &lt;div class=&quot;pswp__share-tooltip&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;button class=&quot;pswp__button pswp__button--arrow--left&quot; title=&quot;Previous (arrow left)&quot;&gt; &lt;/button&gt; &lt;button class=&quot;pswp__button pswp__button--arrow--right&quot; title=&quot;Next (arrow right)&quot;&gt; &lt;/button&gt; &lt;div class=&quot;pswp__caption&quot;&gt; &lt;div class=&quot;pswp__caption__center&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; 其次，js初始化最好放到最后，也就是上面代码和js的后面，使用时也可压缩一下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081//拿到预览框架，也就是上面的html代码var pswpElement = document.querySelectorAll(&#x27;.pswp&#x27;)[0];//定义图片数组变量var imgitems;/*** 用于显示预览界面* @param index 图片数组下标*/function viewImg(index) &#123; //其它选项这里不做过多阐述，详情见官网 var pswpoptions = &#123; index: parseInt(index, 10),//开始幻灯片索引。0是第一张幻灯片。必须是整数，而不是字符串。 bgOpacity: 0.7,//背景透明度，0-1 maxSpreadZoom: 3//缩放级别，不要太大 &#125;; //初始化并打开PhotoSwipe，pswpElement对应上面预览框架，PhotoSwipeUI_Default为皮肤，imgitems为图片数组，pswpoptions为选项 var gallery = new PhotoSwipe(pswpElement, PhotoSwipeUI_Default, imgitems, pswpoptions); gallery.init()&#125;/*** 用于添加图片点击事件* @param img 图片元素* @param index 所属下标（在imgitems中的位置）*/function addImgClick(img, index) &#123; img.onclick = function() &#123; viewImg(index) &#125;&#125;/*** 轮询所有图片，获取src、width、height等数据，加入imgitems，并给图片元素添加事件* 最好在onload中执行该方法，本站因放在最底部，所以直接初始化* 异步加载图片可在图片元素创建完成后调用此方法*/function initImg() &#123; //重置图片数组 imgitems = []; //查找class:photoswipe-show下的所有img元素并遍历 var imgs = document.querySelectorAll(&#x27;.photoswipe-show img&#x27;); for (var i = 0; i &lt; imgs.length; i++) &#123; var img = imgs[i]; //本站相册初始为loading图片，真实图片放在data-src var ds = img.getAttribute(&quot;data-src&quot;); //创建image对象，用于获取图片宽高 var imgtemp = new Image(); //判断是否存在data-src if (ds != null &amp;&amp; ds.length &gt; 0) &#123; imgtemp.src = ds &#125; else &#123; imgtemp.src = img.src &#125; //判断是否存在缓存 if (imgtemp.complete) &#123; var imgobj = &#123; &quot;src&quot;: imgtemp.src, &quot;w&quot;: imgtemp.width, &quot;h&quot;: imgtemp.height, &quot;msrc&quot;: &quot;/static/img/preloader.gif&quot; &#125;; imgitems[i] = imgobj; addImgClick(img, i); &#125; else &#123; imgtemp.index = i; imgtemp.img = img; imgtemp.onload = function() &#123; var imgobj = &#123; &quot;src&quot;: this.src, &quot;w&quot;: this.width, &quot;h&quot;: this.height, &quot;msrc&quot;: &quot;/static/img/preloader.gif&quot; &#125;; //不要使用push，因为onload前后顺序会不同 imgitems[this.index] = imgobj //添加点击事件 addImgClick(this.img, this.index); &#125; &#125; &#125;&#125;//初始化initImg();","tags":[{"name":"PhotoSwipe","slug":"PhotoSwipe","permalink":"https://blog.bidd.net/tags/PhotoSwipe/"},{"name":"笔记","slug":"笔记","permalink":"https://blog.bidd.net/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"JS实现页面切换保持音乐播放","date":"2017-07-01T14:38:00.000Z","path":"2017/07/01/6e6ec3141bdc/","text":"今天网易云给我推荐了一首程嘉敏的《蠢货》，这风格挺和我口味，真心不知道网易云怎么算出来我好这口的。单曲不过瘾，花了点时间整上博客背景音乐了，因为是静态博客，所以用JS让音乐在页面切换中能继续播放（貌似是我很久之前就有的想法，正好今天实现了）原本是用的cookie存储的，但多了一堆存取cookie的代码，没用过Html5的localStorage ，正好今天试一试水 12345678910111213141516&lt;audio src=&quot;/static/assets/music/ch.mp3&quot; id=&quot;backgroundmusic&quot; loop=&quot;loop&quot;&gt;&lt;/audio&gt;&lt;script type=&quot;text/javascript&quot;&gt;var backgroundmusic=document.getElementById(&quot;backgroundmusic&quot;);var musicposition=localStorage.backgroundmusic;//判断上次是否播放if(typeof(musicposition)!=&quot;undefined&quot;)&#123;//设置为上次播放位置backgroundmusic.currentTime=musicposition;&#125;//实时获取播放位置setInterval(function () &#123;localStorage.backgroundmusic=backgroundmusic.currentTime;&#125;, 100);//设置加载完成后自动播放backgroundmusic.autoplay=true;&lt;/script&gt; 没办法，没法做到无缝:)","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://blog.bidd.net/tags/JavaScript/"}]},{"title":"JS带密码加密解密","date":"2017-07-01T08:04:00.000Z","path":"2017/07/01/f9691decb10b/","text":"来源网络，留下备用，后期加入相册功能中，毕竟现在相册唬人的加密有点太那个。。。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172//加密function encrypt(str, pwd) &#123; if (pwd == null || pwd.length &lt;= 0) &#123; alert(&quot;Please enter a password with which to encrypt the message.&quot;); return null; &#125; var prand = &quot;&quot;; for (var i = 0; i &lt; pwd.length; i++) &#123; prand += pwd.charCodeAt(i).toString(); &#125; var sPos = Math.floor(prand.length / 5); var mult = parseInt(prand.charAt(sPos) + prand.charAt(sPos * 2) + prand.charAt(sPos * 3) + prand.charAt(sPos * 4) + prand.charAt(sPos * 5)); var incr = Math.ceil(pwd.length / 2); var modu = Math.pow(2, 31) - 1; if (mult &lt; 2) &#123; alert(&quot;Algorithm cannot find a suitable hash. Please choose a different password. \\nPossible considerations are to choose a more complex or longer password.&quot;); return null; &#125; var salt = Math.round(Math.random() * 1000000000) % 100000000; prand += salt; while (prand.length &gt; 10) &#123; prand = (parseInt(prand.substring(0, 10)) + parseInt(prand.substring(10, prand.length))).toString(); &#125; prand = (mult * prand + incr) % modu; var enc_chr = &quot;&quot;; var enc_str = &quot;&quot;; for (var i = 0; i &lt; str.length; i++) &#123; enc_chr = parseInt(str.charCodeAt(i) ^ Math.floor((prand / modu) * 255)); if (enc_chr &lt; 16) &#123; enc_str += &quot;0&quot; + enc_chr.toString(16); &#125; else enc_str += enc_chr.toString(16); prand = (mult * prand + incr) % modu; &#125; salt = salt.toString(16); while (salt.length &lt; 8) salt = &quot;0&quot; + salt; enc_str += salt; return enc_str;&#125;//解密function decrypt(str, pwd) &#123; if (str == null || str.length &lt; 8) &#123; alert(&quot;A salt value could not be extracted from the encrypted message because it&#x27;s length is too short. The message cannot be decrypted.&quot;); return; &#125; if (pwd == null || pwd.length &lt;= 0) &#123; alert(&quot;Please enter a password with which to decrypt the message.&quot;); return; &#125; var prand = &quot;&quot;; for (var i = 0; i &lt; pwd.length; i++) &#123; prand += pwd.charCodeAt(i).toString(); &#125; var sPos = Math.floor(prand.length / 5); var mult = parseInt(prand.charAt(sPos) + prand.charAt(sPos * 2) + prand.charAt(sPos * 3) + prand.charAt(sPos * 4) + prand.charAt(sPos * 5)); var incr = Math.round(pwd.length / 2); var modu = Math.pow(2, 31) - 1; var salt = parseInt(str.substring(str.length - 8, str.length), 16); str = str.substring(0, str.length - 8); prand += salt; while (prand.length &gt; 10) &#123; prand = (parseInt(prand.substring(0, 10)) + parseInt(prand.substring(10, prand.length))).toString(); &#125; prand = (mult * prand + incr) % modu; var enc_chr = &quot;&quot;; var enc_str = &quot;&quot;; for (var i = 0; i &lt; str.length; i += 2) &#123; enc_chr = parseInt(parseInt(str.substring(i, i + 2), 16) ^ Math.floor((prand / modu) * 255)); enc_str += String.fromCharCode(enc_chr); prand = (mult * prand + incr) % modu; &#125; return enc_str;&#125; 注：不支持中文，可通过中文和unicode互转的方法解决后面再完善，先留下代码 12var str = &quot;\\u7434\\u5fc3\\u5251\\u9b44\\u4eca\\u4f55\\u5728\\uff0c\\u6c38\\u591c\\u521d\\u6657\\u51dd\\u78a7\\u5929\\u3002&quot;; document.write(decodeURI(str.replace(/\\\\u/g, &#x27;%u&#x27;))); //琴心剑魄今何在，永夜初晗凝碧天。","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://blog.bidd.net/tags/JavaScript/"}]},{"title":"SpringMVC+MyBaits获取SqlSession和Service对象","date":"2017-06-27T01:52:00.000Z","path":"2017/06/27/ceb4b0c8ecb9/","text":"当普通JAVA类或者JSP需要使用service中的方法或者执行sql时使用 12345678910111213141516171819202122232425262728/** * Created by X on 2017/6/27. * 用于其他类使用service和sqlsession */public class DBAccess extends SqlSessionDaoSupport implements ApplicationContextAware &#123; private static ApplicationContext applicationContext; private static SqlSession sqlSession; @Override public void setApplicationContext(ApplicationContext applicationContext) throws BeansException &#123; this.applicationContext = applicationContext; &#125; @Override @Autowired public void setSqlSessionTemplate(SqlSessionTemplate sqlSessionTemplate) &#123; super.setSqlSessionTemplate(sqlSessionTemplate); this.sqlSession = sqlSessionTemplate; &#125; public static ApplicationContext getContext() &#123; return applicationContext; &#125; public static SqlSession getSqlSessions() &#123; return sqlSession; &#125;&#125; applicationContext.xml中配置此bean，以便让Spring启动时自动为我们注入ApplicationContext对象 1&lt;bean class=&quot;com.xizirumeng.util.DBAccess&quot;&gt;&lt;/bean&gt; 使用： 12DBAccess.getContext().getBean(&quot;WxUserServiceImpl&quot;);DBAccess.getSqlSessions();","tags":[]},{"title":"InputStream转String乱码解决方法","date":"2017-06-09T07:26:00.000Z","path":"2017/06/09/f1ccd5778092/","text":"来源于网络，用以备忘 123456789101112131415161718192021222324public static String toString(InputStream is) &#123; try &#123; ByteArrayOutputStream boa = new ByteArrayOutputStream(); int len = 0; byte[] buffer = new byte[1024]; while ((len = is.read(buffer)) != -1) &#123; boa.write(buffer, 0, len); &#125; is.close(); boa.close(); byte[] result = boa.toByteArray(); String temp = new String(result); if (temp.contains(&quot;utf-8&quot;)) &#123; return new String(result, &quot;utf-8&quot;); &#125; else if (temp.contains(&quot;gb2312&quot;)) &#123; return new String(result, &quot;gb2312&quot;); &#125; else &#123; return new String(result, &quot;utf-8&quot;); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); return null; &#125;&#125;","tags":[{"name":"InputStream","slug":"InputStream","permalink":"https://blog.bidd.net/tags/InputStream/"}]},{"title":"JPEG图片渐进式处理（Progressive）","date":"2017-05-03T02:06:00.000Z","path":"2017/05/03/8e3a6787fcea/","text":"每次逛百度图片时，很好奇它的图片是怎么从模糊到清晰变化的，开始以为时代码上的处理，直到后来无意发现来jpg的编码格式是有Baseline JPEG（标准型）和Progressive JPEG（渐进式）两种。两种格式有相同尺寸以及图像数据，他们的扩展名也是相同的，唯一的区别是显示的方式不同。 Baseline JPEG这种类型的JPEG文件存储方式是按从上到下的扫描方式，把每一行顺序的保存在JPEG文件中。打开这个文件显示它的内容时，数据将按照存储时的顺序从上到下一行一行的被显示出来，直到所有的数据都被读完，就完成了整张图片的显示。如果文件较大或者网络下载速度较慢，那么就会看到图片被一行行加载的效果，这种格式的JPEG没有什么优点。 Progressive JPEGProgressive JPEG文件包含多次扫描，这些扫描顺寻的存储在JPEG文件中。打开文件过程中，会先显示整个图片的模糊轮廓，随着扫描次数的增加，图片变得越来越清晰。这种格式的主要优点是在网络较慢的情况下，可以看到图片的轮廓知道正在加载的图片大概是什么。百度图片就是这种。渐进式图片带来的好处是可以让用户在没有下载完图片就可以看到最终图像的大致轮廓，一定程度上可以提升用户体验。 格式转换Linux检测是否为progressive jpeg 123456//转换前，结果为：None，表明非渐进式[root@master1 ~]# identify -verbose pj.jpg | grep Interlace Interlace: None//转换后，结果为：JPEG，表明是渐进式 [root@master1 ~]# identify -verbose pj-p.jpg | grep Interlace Interlace: JPEG 将basic jpeg转换成progressive jpeg 1convert basic.jpg -interlace Plane progressive.jpg PHP123456&lt;?php $im= imagecreatefromjpeg(&#x27;basic.jpg&#x27;); imageinterlace($im, 1); imagejpeg($im, &#x27;./progressive.jpg&#x27;, 100); imagedestroy($im); ?&gt; Python12345678910importPIL fromexceptions importIOError img =PIL.Image.open(&quot;D:\\\\basic.jpg&quot;) destination =&quot;D:\\\\progressive.jpeg&quot;try: img.save(destination, &quot;JPEG&quot;, quality=80, optimize=True, progressive=True) exceptIOError: PIL.ImageFile.MAXBLOCK =img.size[0] *img.size[1] img.save(destination, &quot;JPEG&quot;, quality=80, optimize=True, progressive=True) jpegtran下载地址：http://jpegclub.org/jpegtran.exe 12//命令jpegtran -copy none -optimize -progressive basic.jpg progressive.jpg C#12345678using(Image source = Image.FromFile(@&quot;D:\\\\basic.jpg&quot;)) &#123; ImageCodecInfo codec = ImageCodecInfo.GetImageEncoders().First(c =&gt; c.MimeType == &quot;image/jpeg&quot;); EncoderParameters parameters = newEncoderParameters(3); parameters.Param[0] = newEncoderParameter(System.Drawing.Imaging.Encoder.Quality, 100L); parameters.Param[1] = newEncoderParameter(System.Drawing.Imaging.Encoder.ScanMethod, (int)EncoderValue.ScanMethodInterlaced); parameters.Param[2] = newEncoderParameter(System.Drawing.Imaging.Encoder.RenderMethod, (int)EncoderValue.RenderProgressive); source.Save(@&quot;D:\\progressive.jpg&quot;, codec, parameters); &#125; JAVA1234567891011121314151617181920212223242526272829303132package com.tuzki.sannychan;import java.awt.image.BufferedImage;import java.io.File;import java.io.IOException;import java.util.Iterator;import javax.imageio.IIOImage;import javax.imageio.ImageIO;import javax.imageio.ImageWriteParam;import javax.imageio.ImageWriter;import javax.imageio.stream.ImageOutputStream;public class ProgressiveJPEG &#123; public static void main(String[] args) throws Exception &#123; File file=new File(&quot;D:/basic.jpg&quot;); BufferedImage image = ImageIO.read(file); Iterator&lt;ImageWriter&gt; it = ImageIO.getImageWritersByFormatName(&quot;jpeg&quot;); ImageWriter writer=null; while(it.hasNext()) &#123; writer=it.next(); break; &#125; if(writer!=null) &#123; ImageWriteParam params = writer.getDefaultWriteParam(); params.setProgressiveMode(ImageWriteParam.MODE_DEFAULT); //params.setCompressionQuality(0.8f); ImageOutputStream output = ImageIO.createImageOutputStream(new File(&quot;D:/progressive.jpg&quot;)); writer.setOutput(output); writer.write(null,new IIOImage(image,null,null), params); output.flush(); writer.dispose(); &#125; &#125;&#125;","tags":[{"name":"Progressive","slug":"Progressive","permalink":"https://blog.bidd.net/tags/Progressive/"}]},{"title":"Android常用数据存储","date":"2017-04-23T09:36:00.000Z","path":"2017/04/23/d95fe20f6005/","text":"SharedPreferences存储概述 SharePreferences是用来存储一些简单配置信息的一种机制，使用Map数据结构来存储数据，以键值对的方式存储，采用了XML格式将数据存储到设备中。例如保存登录用户的用户名和密码。只能在同一个包内使用，不能在不同的包之间使用，其实也就是说只能在创建它的应用中使用，其他应用无法使用。创建的存储文件保存在&#x2F;data&#x2F;data&#x2F;&#x2F;shares_prefs文件夹下。 使用通过Context.getSharedPreferences方法获取SharedPreferences对象，参数分别为存储的文件名和存储模式。 12345678910// 获取SharedPreferences对象 SharedPreferences sp = getSharedPreferences(DATABASE, Activity.MODE_PRIVATE); // 获取Editor对象 Editor editor = sp.edit();//添加数据editor.putString(&quot;key&quot;,&quot;value&quot;);//操作完必须提交editor.commit();//取数据sp.getString(&quot;key&quot;); 操作模式Context.MODE_PRIVATE指定该SharedPreferences数据只能被本应用程序或者是拥有相同user ID的应用读、写。 Context.MODE_WORLD_READABLE指定该SharedPreferences数据能被其它应用程序读，但不能写。这个变量在API 17以后已经不建议使用了。创建全局可读文件是非常危险的事，这样会引起程序的安全漏洞。程序之间的交互应该更多的使用正规的途径，比如：ContentProvider, BroadcastReceiver, and Service.当程序通过备份和恢复后，并不能保证这种获取方式依然对该文件有效。文件创建模式：允许所有的其它程序来读取创建的文件。 Context.MODE_WORLD_WRITEABLE指定该SharedPreferences数据能被其它应用程序读，写。这个变量在API 17以后已经不建议使用了。创建全局可写文件是非常危险的事，这样会引起程序的安全漏洞.程序之间的交互应该更多的使用正规的途径，比如：ContentProvider, BroadcastReceiver, and Service.当程序通过备份和恢复后，并不能保证这种获取方式依然对文件有效。文件创建模式：允许所有的其它程序来修改创建的文件。 Context.MODE_MULTI_PROCESS在API11中添加，SharedPreferences加载标记：被设置后，在硬盘上的文件在被修改是将会被检查如果当前的SharedPreferences实例已经被加载进进程后。这种情况通常发生在，当程序有多个进程在修改同一个SharedPreferences文件的时候。通常来说这种方式在进程之间交互表现是非常好的。 文件存储概述 Android中可以在设备本身的存储设备或外接的存储设备中创建用于保存数据的文件。在默认状态下，文件是不能在不同程序间共享的。当用户卸载您的应用程序时，这些文件删除。文件存储数据可以通过openFileOutput方法打开一个文件（如果这个）文件不存在就自动创建这个文件），通过load方法来获取文件中的数据，通过deleteFile方法删除一个指定的文件。 使用File是通过FileInputStream和FileOutputStream对文件进行操作。Context提供了如下两个方法来打开本应用程序的数据文件将爱丽的文件IO流。 1234//打开应用程序的数据文件夹下的name文件对应输入流。FileInputStream fsinput=this.openFileInput(String name);//打开应用程序的数据文件夹下的name文件对应输出流。FileOutputStream fsoutput=this.openFileOutput(String name,int mode); 存储模式Context.MODE_PRIVATE私有覆盖模式 rw- rw- —只能被当前应用访问，并且如果写入，则覆盖； Context.MODE_APPEND私有追加模式 rw- rw- —只能被当前应用访问，并且如果写入，则追加； Context.MODE_WORLD_READABLE公有只读模式 rw- rw- r–可以被其他应用读取； Context.MODE_WORLD_WRITEABLE公有可写模式 rw- rw- -w-可以被其他应用写入，但不能读取； 模式可叠加如：Context.MODE_WORLD_READABLE + Context.MODE_WORLD_WRITEABLE 表示其他应用读写； SQLite数据库存储使用ContentProvider存储数据网络存储数据待续……","tags":[{"name":"storager","slug":"storager","permalink":"https://blog.bidd.net/tags/storager/"}]},{"title":"Java中逻辑与和逻辑或的区别","date":"2017-04-22T07:35:00.000Z","path":"2017/04/22/4eedd9a8f0f3/","text":"与操作：与操作分为两种，一种是普通与，另外一种是短路与：普通与（&amp;）：表示所有的判断条件都要执行，不管前面是否满足；短路与（&amp;&amp;）：如果前面的条件已经是false了，那么后面的条件不需要再进行任何的判断； 或操作：或操作分为两种，一种是普通或，另外一种是短路或；普通或（|）：表示所有的判断条件都要执行，不管前面是否满足；短路或（||）：如果前面的条件已经是true了，那么后面无论如何判断都是true，就不判断了； 在开发之中考虑到程序的性能肯定使用短路与（&amp;&amp;）和短路或（||）。","tags":[{"name":"逻辑","slug":"逻辑","permalink":"https://blog.bidd.net/tags/%E9%80%BB%E8%BE%91/"}]},{"title":"JS异步加载","date":"2017-04-21T04:17:00.000Z","path":"2017/04/21/987585f804d6/","text":"目前总共四种方法，各有长短，酌情选择。 方法1：$(document).ready利用jquery的ready，前提是需要引用jquery，兼容所有浏览器123$(document).ready(function() &#123; alert(&quot;Success !&quot;);&#125;); 方法2：html5 async属性由题可知，需要支持html5的浏览器，并且只支持外部脚本（src）1&lt;script type=&quot;text/javascript&quot; src=&quot;myjavascript.js&quot; async=&quot;async&quot;&gt;&lt;/script&gt; 方法3：script标签的defer属性w3school原文：HTML script 标签的 defer 属性：defer 属性规定是否对脚本执行进行延迟，直到页面加载为止。有的 javascript 脚本 document.write 方法来创建当前的文档内容，其他脚本就不一定是了。如果您的脚本不会改变文档的内容，可将 defer 属性加入到 script 标签中，以便加快处理文档的速度。因为浏览器知道它将能够安全地读取文档的剩余部分而不用执行脚本，它将推迟对脚本的解释，直到文档已经显示给用户为止。只有 Internet Explorer 支持 defer 属性。123&lt;script type=&quot;text/javascript&quot; defer=&quot;defer&quot;&gt;alert(document.getElementById(&quot;p1&quot;).firstChild.nodeValue);&lt;/script&gt; HTML 5 script defer 属性：defer 属性规定当页面已完成加载后，才会执行脚本。注释：defer 属性仅适用于外部脚本（只有在使用 src 属性时）。注释：有多种执行外部脚本的方法：如果 async&#x3D;”async”：脚本相对于页面的其余部分异步地执行（当页面继续进行解析时，脚本将被执行）如果不使用 async 且 defer&#x3D;”defer”：脚本将在页面完成解析时执行如果既不使用 async 也不使用 defer：在浏览器继续解析页面之前，立即读取并执行脚本1&lt;script type=&quot;text/javascript&quot; src=&quot;demo_defer.js&quot; defer=&quot;defer&quot;&gt;&lt;/script&gt; 方法4：动态创建script应该是兼容所有浏览器的。1234567(function()&#123; var scripts = document.createElement(&#x27;script&#x27;); scripts.type = &#x27;text/javascript&#x27;; scripts.src = &quot;myjavascript.js&quot;; var temp = document.getElementsByTagName(&#x27;script&#x27;)[0]; temp.parentNode.insertBefore(scripts, temp);&#125;)();","tags":[{"name":"async","slug":"async","permalink":"https://blog.bidd.net/tags/async/"}]},{"title":"Java图片转ASCII字符画","date":"2017-03-31T01:51:00.000Z","path":"2017/03/31/0b68116ee99f/","text":"先来一张看看效果(所用图片分辨率50x42) 123456789101112131415161718192021 #@@@@@@&amp; ;*$&amp;$$$$$$$*! $@@@@@@@@@@@$; *&amp;! $@@@@@@@* o@@@@@@@@@@* ;@@@@@@@@@@. *@@@@@@@@# o@@@@@@@@&amp; o@@@@@@@* .$#*. !o$oo. o@@@@@@@# *@@@@@. !o$o.o*$; !o! ;&amp;! o@@@@@@$ .#@@o %@&amp;###@oo .!#%@&amp;o;. *@@@@&amp; % ;!o;;!; ;o!.!!. &amp;$! $ ;o; . .% %; .!; . $ .$ ;!. .$@$##o ! %. #! !o..;!. .;. o* &amp;@# . .@... !;!!o*%!.. ;@% &amp;@@@; .@@@@@@@#$&amp;. ; ;@@# &amp;@@@@ . ; *@@@# &amp;@@@@@o !o!!;. .@#@@@# &amp;@@@@#@@o #@@@@@@@*&amp;@@@@@@@@@#! !#@@@@@@@@@o&amp;@@@@@@@@@@@@@%o. ;*#@@@@@@@@@@@@@@o&amp;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@* 实现代码： 12345678910111213141516171819202122232425/*** @param path* 图片路径*/public static void createAsciiPic(final String path) &#123;final String base = &quot;@#&amp;$%*o!;.&quot;;// 字符串由复杂到简单try &#123; final BufferedImage image = ImageIO.read(new File(path)); for (int y = 0; y &lt; image.getHeight(); y += 2) &#123; for (int x = 0; x &lt; image.getWidth(); x++) &#123; final int pixel = image.getRGB(x, y); final int r = (pixel &amp; 0xff0000) &gt;&gt; 16, g = (pixel &amp; 0xff00) &gt;&gt; 8, b = pixel &amp; 0xff; final float gray = 0.299f * r + 0.578f * g + 0.114f * b; final int index = Math.round(gray * (base.length() + 1) / 255); System.out.print(index &gt;= base.length() ? &quot; &quot; : String.valueOf(base.charAt(index))); &#125; System.out.println(); &#125;&#125; catch (final IOException e) &#123; e.printStackTrace();&#125;&#125;public static void main(String[] args) &#123; createAsciiPic(&quot;D:/1.jpg&quot;);&#125; 无意搜到支持转gif的，果断收藏GitHub：https://github.com/korhner/asciimgMyGitHubFork：https://github.com/RuMengRen/asciimg","tags":[{"name":"ASCII","slug":"ASCII","permalink":"https://blog.bidd.net/tags/ASCII/"}]},{"title":"HTML图片懒加载及判断元素是否在可视区域","date":"2017-03-29T03:36:00.000Z","path":"2017/03/29/6dd817f9f914/","text":"最近博客整了一个相册，浏览时一次性加载了所有图片，导致响应很慢，分页太麻烦，不想弄，于是查资料，实现懒加载。原理是先生成所有img标签，src不给值，图片路径放到data-src属性中如： 1&lt;img data-src=&#x27;/img/test.jpg&#x27; /&gt; 然后通过js判断元素是不是在浏览器可视区域中在可视就赋值给src，实现懒加载判断是否在可视区域代码如下： 12345//判断id:test元素是否在浏览器可视范围内，可视false，否则true($(window).scrollTop()&gt;($(&quot;#test&quot;).offset().top+$(&quot;#test&quot;).outerHeight()))||(($(window).scrollTop()+$(window).height())&lt;$(&quot;#test&quot;).offset().top)//注意，.class 选择器如存在多个，需要将单个元素用$()包裹，如($(window).scrollTop()&gt;($($(&quot;.abc&quot;)[10]).offset().top+$($(&quot;.abc&quot;)[10]).outerHeight()))||(($(window).scrollTop()+$(window).height())&lt;$($(&quot;.abc&quot;)[10]).offset().top)//不然会提示offset()不存在 主要代码如下1234567891011121314151617181920212223242526272829function setImg(index) &#123; //找到#imgphoto下所有img元素（find向下多级查找，children只沿着 DOM 树向下遍历单一层级） var aImg = $(&quot;#imgphoto&quot;).find(&quot;img&quot;); //防止重复刷新 if(aImg[index].getAttribute(&quot;src&quot;)!=aImg[index].getAttribute(&#x27;data-src&#x27;))&#123; //html5最新属性，取出data-src中的值 if (aImg[index].dataset) &#123; var src = aImg[index].dataset.src; &#125; else &#123; var src = aImg[index].getAttribute(&#x27;data-src&#x27;); &#125; aImg[index].src=src; &#125;&#125;//判断当前img的位置！function updateImg() &#123; var img = $(&quot;#imgphoto&quot;).children(&quot;img&quot;); for (var i = 0, l = img.length; i &lt; l; i++) &#123; var oimg = img[i]; //检查oimg是否在可视区域 var is=($(window).scrollTop()&gt;($(oimg).offset().top+$(oimg).outerHeight()))||(($(window).scrollTop()+$(window).height())&lt;$(oimg).offset().top); if (!is) &#123; //加载图片 setTimeout(&quot;setImg(&quot; + i + &quot;)&quot;, 500); &#125; &#125;&#125;;//启动定时器，循环判断是否在可视区域，因onscroll被占用，代替方法var inter=setInterval(&quot;updateImg()&quot;,1000);//1000为1秒钟","tags":[{"name":"img","slug":"img","permalink":"https://blog.bidd.net/tags/img/"},{"name":"Lazy load","slug":"Lazy-load","permalink":"https://blog.bidd.net/tags/Lazy-load/"}]},{"title":"Java四种线程池的使用","date":"2017-03-28T10:07:00.000Z","path":"2017/03/28/ff7673d08730/","text":"Java通过Executors提供四种线程池，分别为： newCachedThreadPool创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。 newFixedThreadPool创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。 newScheduledThreadPool创建一个定长线程池，支持定时及周期性任务执行。 newSingleThreadExecutor创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。 newCachedThreadPool创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。示例代码如下：123456789101112131415161718192021package test; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; public class ThreadPoolExecutorTest &#123; public static void main(String[] args) &#123; ExecutorService cachedThreadPool = Executors.newCachedThreadPool(); for (int i = 0; i &lt; 10; i++) &#123; final int index = i; try &#123; Thread.sleep(index * 1000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; cachedThreadPool.execute(new Runnable() &#123; public void run() &#123; System.out.println(index); &#125; &#125;); &#125; &#125; &#125; 线程池为无限大，当执行第二个任务时第一个任务已经完成，会复用执行第一个任务的线程，而不用每次新建线程。 newFixedThreadPool创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。示例代码如下：123456789101112131415161718192021package test; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; public class ThreadPoolExecutorTest &#123; public static void main(String[] args) &#123; ExecutorService fixedThreadPool = Executors.newFixedThreadPool(3); for (int i = 0; i &lt; 10; i++) &#123; final int index = i; fixedThreadPool.execute(new Runnable() &#123; public void run() &#123; try &#123; System.out.println(index); Thread.sleep(2000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; &#125;); &#125; &#125; &#125; 因为线程池大小为3，每个任务输出index后sleep 2秒，所以每两秒打印3个数字。定长线程池的大小最好根据系统资源进行设置。如Runtime.getRuntime().availableProcessors() newScheduledThreadPool创建一个定长线程池，支持定时及周期性任务执行。延迟执行示例代码如下：1234567891011121314package test; import java.util.concurrent.Executors; import java.util.concurrent.ScheduledExecutorService; import java.util.concurrent.TimeUnit; public class ThreadPoolExecutorTest &#123; public static void main(String[] args) &#123; ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(5); scheduledThreadPool.schedule(new Runnable() &#123; public void run() &#123; System.out.println(&quot;delay 3 seconds&quot;); &#125; &#125;, 3, TimeUnit.SECONDS); &#125; &#125; 表示延迟3秒执行。** 定期执行示例代码如下：1234567891011121314package test; import java.util.concurrent.Executors; import java.util.concurrent.ScheduledExecutorService; import java.util.concurrent.TimeUnit; public class ThreadPoolExecutorTest &#123; public static void main(String[] args) &#123; ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(5); scheduledThreadPool.scheduleAtFixedRate(new Runnable() &#123; public void run() &#123; System.out.println(&quot;delay 1 seconds, and excute every 3 seconds&quot;); &#125; &#125;, 1, 3, TimeUnit.SECONDS); &#125; &#125; 表示延迟1秒后每3秒执行一次。 newSingleThreadExecutor创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。示例代码如下：123456789101112131415161718192021package test; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; public class ThreadPoolExecutorTest &#123; public static void main(String[] args) &#123; ExecutorService singleThreadExecutor = Executors.newSingleThreadExecutor(); for (int i = 0; i &lt; 10; i++) &#123; final int index = i; singleThreadExecutor.execute(new Runnable() &#123; public void run() &#123; try &#123; System.out.println(index); Thread.sleep(2000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; &#125;); &#125; &#125; &#125; 结果依次输出，相当于顺序执行各个任务。你可以使用JDK自带的监控工具来监控我们创建的线程数量，运行一个不终止的线程，创建指定量的线程，来观察：工具目录：C:\\Program Files\\Java\\jdk1.6.0_06\\bin\\jconsole.exe运行程序做稍微修改：12345678910111213141516171819202122232425262728package test; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; public class ThreadPoolExecutorTest &#123; public static void main(String[] args) &#123; ExecutorService singleThreadExecutor = Executors.newCachedThreadPool(); for (int i = 0; i &lt; 100; i++) &#123; final int index = i; singleThreadExecutor.execute(new Runnable() &#123; public void run() &#123; try &#123; while(true) &#123; System.out.println(index); Thread.sleep(10 * 1000); &#125; &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; &#125;); try &#123; Thread.sleep(500); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; &#125; &#125;","tags":[{"name":"Thread","slug":"Thread","permalink":"https://blog.bidd.net/tags/Thread/"},{"name":"Pool","slug":"Pool","permalink":"https://blog.bidd.net/tags/Pool/"}]},{"title":"ul-li使用display-inline-block一行显示出现空格的解决方法","date":"2017-03-22T03:26:00.000Z","path":"2017/03/22/0d11edba7a39/","text":"解决方法一1&lt;ul&gt;&lt;li&gt;1&lt;/li&gt;&lt;li&gt;2&lt;/li&gt;&lt;li&gt;3&lt;/li&gt;&lt;li&gt;4&lt;/li&gt;&lt;/ul&gt; 没错，不换行就没一点事，但是代码美观就欠缺了 解决方法二12345&lt;ul style=&quot;font-size:0px;&quot;&gt; &lt;li&gt;1&lt;/li&gt; &lt;li&gt;2&lt;/li&gt; &lt;li&gt;3&lt;/li&gt;&lt;/ul&gt; 这个没测试，百度有很多是这样说的，但是缺点是下面的li要重新设置字体大小且Safari浏览器还是有空格 解决方法三12345678910111213&lt;style type=&quot;text/css&quot;&gt; ul&#123; letter-spacing: -4px; &#125; li&#123; letter-spacing: normal; &#125;&lt;/style&gt;&lt;ul&gt; &lt;li&gt;1&lt;/li&gt; &lt;li&gt;2&lt;/li&gt; &lt;li&gt;3&lt;/li&gt;&lt;/ul&gt; 将字符间隔消除，同样的要将li的字符还原，是比较完美的方法了","tags":[{"name":"Html","slug":"Html","permalink":"https://blog.bidd.net/tags/Html/"}]},{"title":"exe携带大附件方法","date":"2017-03-20T05:14:00.000Z","path":"2017/03/20/03b6f5df76be/","text":"易语言静态编译，如果资源文件太大，就会提示内存不足这里提供一个方法，让exe文件能够携带大附件只用易语言测试，其他自测 首先生成不带附件的exe（例：EICP.exe） 然后用十六进制编辑器打开这个exe 在其尾部添加一个标识代码，如：aaaaaaaaaaaaaaaa，简单点的 用十六进制编辑器打开需要携带的附件（例：EICPs.zip），复制所有，粘贴到标识代码后面 保存读取代码如下（易语言，其他理论可以）：123456789101112131415.版本 2.程序集 窗口程序集_启动窗口.子程序 _按钮1_被单击.局部变量 文本1, 文本型.局部变量 原字节集, 字节集.局部变量 出现位置, 整数型.局部变量 截取字节集, 字节集, , &quot;2&quot;.局部变量 取到的字节集, 字节集原字节集 ＝ 读入文件 (“C:\\Users\\X\\Desktop\\EICP.exe”) &#x27; 尾部添加了“aaaaaaaaaaaaaaaa”作为关键字出现位置 ＝ 寻找字节集 (原字节集, 到字节集 (“aaaaaaaaaaaaaaaa”), ) &#x27; 取出位置取到的字节集 ＝ 取字节集右边 (原字节集, 取字节集长度 (原字节集) － 出现位置 － 15) &#x27; （总长度-关键字出现的位置）-关键字长度写到文件 (“C:\\Users\\X\\Desktop\\EICPs.zip”, 取到的字节集)","tags":[{"name":"e","slug":"e","permalink":"https://blog.bidd.net/tags/e/"}]},{"title":"MySql导入导出","date":"2017-03-15T06:17:00.000Z","path":"2017/03/15/28b34c3f758e/","text":"导出整个数据库 mysqldump -u 用户名 -p 数据库名 &gt; 导出的文件名mysqldump -u dbuser -p dbname &gt; dbname.sql 导出一个表 mysqldump -u 用户名 -p 数据库名 表名&gt; 导出的文件名mysqldump -u dbuser -p dbname users&gt; dbname_users.sql 导出一个数据库结构 mysqldump -u dbuser -p -d –add-drop-table dbname &gt;d:&#x2F;dbname_db.sql-d 没有数据–add-drop-table 在每个create语句之前增加一个drop table 导入数据库 mysql -u root -pmysql&gt;use 数据库mysql&gt;source d:&#x2F;dbname.sql 导入数据到数据库 mysql -uroot -D 数据库名 导入数据到数据库中得某个表 mysql -uroot -D 数据库名 表名","tags":[{"name":"MySql","slug":"MySql","permalink":"https://blog.bidd.net/tags/MySql/"}]},{"title":"JS编码和解码","date":"2017-03-15T02:28:00.000Z","path":"2017/03/15/c1a6f9c09eea/","text":"本文讨论如何对传递参数用JS编码与解码 编码与解码方法的对应关系escape ——————– unescape encodeURI ——————– decodeURI encodeURIComponent ——————– encodeURIComponent 解码与编码方法用法123var value1=escape(&#x27;1²&#x27;);var getValue1=unescape(value1);//encodeURI ，decodeURI，encodeURIComponent ，encodeURIComponent 用法和escape，unescape用法都是一样的。 三种编码方法的区别和联系 编码方式：encodeURI ，encodeURIComponent 都是采用UTF-8进行对参数编码，而escape 则不是。 不会被编码的字符：encodeURI 不对：”:”、”&#x2F;“、”;” 和 “?”字符进行编码。 用法场合：escape 不对URL进行编码，如果要对URL进行编码，应该使用encodeURI 或者encodeURIComponent ，对应的解码方法也是这样。推荐使用的方法顺序：encodeURIComponent –encodeURI –escape 。注意：用encodeURIComponent 、encodeURI 在前台编码后的字符串，可以直接在后台用Java解码的方式URLDecoder.decode(val,”UTF-8”);进行解码，原因是这两个方法本身就是以UTF-8进行编码的。用起来很方便。","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://blog.bidd.net/tags/JavaScript/"}]},{"title":"Android创建悬浮窗","date":"2017-03-11T13:10:00.000Z","path":"2017/03/11/bd6947742943/","text":"简单的代码快速创建悬浮窗 12345678910111213WindowManager mWindowManager = (WindowManager) context.getApplicationContext().getSystemService(Context.WINDOW_SERVICE);WindowManager.LayoutParams mWindowParams = new WindowManager.LayoutParams( WindowManager.LayoutParams.WRAP_CONTENT, WindowManager.LayoutParams.WRAP_CONTENT, WindowManager.LayoutParams.TYPE_TOAST, WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE,//不接受事件及触摸 PixelFormat.RGBA_8888);if (Build.VERSION.SDK_INT &lt; 19 ) &#123; mWindowParams.type = WindowManager.LayoutParams.TYPE_SYSTEM_ALERT;&#125;else&#123; mWindowParams.type = WindowManager.LayoutParams.TYPE_TOAST;&#125;mWindowManager.addView(new DesktopLayout(context),mWindowParams ); DesktopLayout12345678910111213public class DesktopLayout extends LinearLayout &#123; public DesktopLayout(Context context) &#123; super(context); setOrientation(LinearLayout.VERTICAL);// 水平排列 //设置宽高 this.setLayoutParams( new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT)); View view = LayoutInflater.from(context).inflate( R.layout.desklayout, null); this.addView(view); &#125;&#125; xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;100px&quot; android:layout_height=&quot;100px&quot; android:orientation=&quot;horizontal&quot; &gt; &lt;TextView android:layout_width=&quot;100px&quot; android:layout_height=&quot;100px&quot; android:text=&quot;测试&quot;/&gt; &lt;/LinearLayout&gt; ``` xml","tags":[]},{"title":"JS较完美判断当前浏览器及版本","date":"2017-03-01T08:08:22.000Z","path":"2017/03/01/41248137eb06/","text":"来源于网络，用以备忘 12345678910111213141516171819202122232425262728293031323334353637function getBrowser()&#123; //注意关键字大小写 var ua_str = navigator.userAgent.toLowerCase(), ie_Tridents, trident, match_str, ie_aer_rv, browser_chi_Type; //判断IE 浏览器, if(&quot;ActiveXObject&quot; in self)&#123; // ie_aer_rv: 指示IE 的版本. // It can be affected by the current document mode of IE. ie_aer_rv= (match_str = ua_str.match(/msie ([\\d.]+)/)) ?match_str[1] : (match_str = ua_str.match(/rv:([\\d.]+)/)) ?match_str[1] : 0; // ie: Indicate the really version of current IE browser. ie_Tridents = &#123;&quot;trident/7.0&quot;: 11, &quot;trident/6.0&quot;: 10, &quot;trident/5.0&quot;: 9, &quot;trident/4.0&quot;: 8&#125;; //匹配 ie8, ie11, edge trident = (match_str = ua_str.match(/(trident\\/[\\d.]+|edge\\/[\\d.]+)/)) ?match_str[1] : undefined; browser_chi_Type = (ie_Tridents[trident] || ie_aer_rv) &gt; 0 ? &quot;ie&quot; : undefined; &#125;else&#123; //判断 windows edge 浏览器 // match_str[1]: 返回浏览器及版本号,如: &quot;edge/13.10586&quot; // match_str[1]: 返回版本号,如: &quot;edge&quot; browser_chi_Type = (match_str = ua_str.match(/edge\\/([\\d.]+)/)) ? &quot;Edge&quot; : //判断firefox 浏览器 (match_str = ua_str.match(/firefox\\/([\\d.]+)/)) ? &quot;Firefox&quot; : //判断chrome 浏览器 (match_str = ua_str.match(/chrome\\/([\\d.]+)/)) ? &quot;Chrome&quot; : //判断opera 浏览器 (match_str = ua_str.match(/opera.([\\d.]+)/)) ? &quot;Opera&quot; : //判断safari 浏览器 (match_str = ua_str.match(/version\\/([\\d.]+).*safari/)) ? &quot;Safari&quot; : undefined; &#125; //返回浏览器类型和版本号 var verNum = trident &amp;&amp; ie_Tridents[trident] ? ie_Tridents[trident] : match_str[1]; var info=new Array(); info.name=browser_chi_Type; info.version=verNum; return info;&#125; 调用方法12console.log(&quot;浏览器：&quot;+getBrowser().name);console.log(&quot;版本：&quot;+getBrowser().version);","tags":[{"name":"browser","slug":"browser","permalink":"https://blog.bidd.net/tags/browser/"}]},{"title":"JGrid表格出现水平滚动条解决方法","date":"2017-02-28T03:41:22.000Z","path":"2017/02/28/8bc1f42a02ad/","text":"百度说是只有谷歌浏览器会出现 1234567891011121314//JGrid实现gridComplete方法gridComplete: function () &#123;// 防止水平方向上出现滚动条removeHorizontalScrollBar();&#125;,/** * 宽度+1像素 * 解决在chrome浏览器下出现水平滚动条 */function removeHorizontalScrollBar() &#123; $(&quot;div.ui-state-default.ui-jqgrid-hdiv.ui-corner-top&quot;).css(&quot;width&quot;, parseInt($(&quot;div.ui-state-default.ui-jqgrid-hdiv.ui-corner-top&quot;).css(&quot;width&quot;)) + 1 + &quot;px&quot;); $(&quot;#table_list_1&quot;).closest(&quot;.ui-jqgrid-bdiv&quot;).css(&quot;width&quot;, parseInt($(&quot;#table_list_1&quot;).closest(&quot;.ui-jqgrid-bdiv&quot;).css(&quot;width&quot;)) + 1 + &quot;px&quot;);&#125;","tags":[{"name":"JSP","slug":"JSP","permalink":"https://blog.bidd.net/tags/JSP/"},{"name":"JGrid","slug":"JGrid","permalink":"https://blog.bidd.net/tags/JGrid/"}]},{"title":"JSP 标准标签库（JSTL）","date":"2017-02-28T01:55:22.000Z","path":"2017/02/28/de47db8bc2a3/","text":"JSTL 库安装Apache Tomcat安装JSTL 库步骤如下：从Apache的标准标签库中下载的二进包(jakarta-taglibs-standard-current.zip)。官方下载地址：http://archive.apache.org/dist/jakarta/taglibs/standard/binaries/下载jakarta-taglibs-standard-1.1.2.zip 包并解压，将jakarta-taglibs-standard-1.1.2&#x2F;lib&#x2F;下的两个jar文件：standard.jar和jstl.jar文件拷贝到&#x2F;WEB-INF&#x2F;lib&#x2F;下。接下来我们在 web.xml 文件中添加以下配置： http://java.sun.com/jstl/fmt &#x2F;WEB-INF&#x2F;fmt.tld http://java.sun.com/jstl/fmt-rt &#x2F;WEB-INF&#x2F;fmt-rt.tld http://java.sun.com/jstl/core &#x2F;WEB-INF&#x2F;c.tld http://java.sun.com/jstl/core-rt &#x2F;WEB-INF&#x2F;c-rt.tld http://java.sun.com/jstl/sql &#x2F;WEB-INF&#x2F;sql.tld http://java.sun.com/jstl/sql-rt &#x2F;WEB-INF&#x2F;sql-rt.tld http://java.sun.com/jstl/x &#x2F;WEB-INF&#x2F;x.tld http://java.sun.com/jstl/x-rt &#x2F;WEB-INF&#x2F;x-rt.tld 核心标签是最常用的JSTL标签。引用核心标签库的语法如下： 123456789101112131415&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;&lt;c:out&gt; 用于在JSP中显示数据，就像&lt;%= ... &gt;&lt;c:set&gt; 用于保存数据&lt;c:remove&gt; 用于删除数据&lt;c:catch&gt; 用来处理产生错误的异常状况，并且将错误信息储存起来&lt;c:if&gt; 与我们在一般程序中用的if一样&lt;c:choose&gt; 本身只当做&lt;c:when&gt;和&lt;c:otherwise&gt;的父标签&lt;c:when&gt; &lt;c:choose&gt;的子标签，用来判断条件是否成立&lt;c:otherwise&gt; &lt;c:choose&gt;的子标签，接在&lt;c:when&gt;标签后，当&lt;c:when&gt;标签判断为false时被执行&lt;c:import&gt; 检索一个绝对或相对 URL，然后将其内容暴露给页面&lt;c:forEach&gt; 基础迭代标签，接受多种集合类型&lt;c:forTokens&gt; 根据指定的分隔符来分隔内容并迭代输出&lt;c:param&gt; 用来给包含或重定向的页面传递参数&lt;c:redirect&gt; 重定向至一个新的URL.&lt;c:url&gt; 使用可选的查询参数来创造一个URL JSTL格式化标签用来格式化并输出文本、日期、时间、数字。引用格式化标签库的语法如下： 123456789101112&lt;%@ taglib prefix=&quot;fmt&quot; uri=&quot;http://java.sun.com/jsp/jstl/fmt&quot; %&gt;&lt;fmt:formatNumber&gt; 使用指定的格式或精度格式化数字&lt;fmt:parseNumber&gt; 解析一个代表着数字，货币或百分比的字符串&lt;fmt:formatDate&gt; 使用指定的风格或模式格式化日期和时间&lt;fmt:parseDate&gt; 解析一个代表着日期或时间的字符串&lt;fmt:bundle&gt; 绑定资源&lt;fmt:setLocale&gt; 指定地区&lt;fmt:setBundle&gt; 绑定资源&lt;fmt:timeZone&gt; 指定时区&lt;fmt:setTimeZone&gt; 指定时区&lt;fmt:message&gt; 显示资源配置文件信息&lt;fmt:requestEncoding&gt; 设置request的字符编码 JSTL SQL标签库提供了与关系型数据库（Oracle，MySQL，SQL Server等等）进行交互的标签。引用SQL标签库的语法如下： 1234567&lt;%@ taglib prefix=&quot;sql&quot; uri=&quot;http://java.sun.com/jsp/jstl/sql&quot; %&gt;&lt;sql:setDataSource&gt; 指定数据源&lt;sql:query&gt; 运行SQL查询语句&lt;sql:update&gt; 运行SQL更新语句&lt;sql:param&gt; 将SQL语句中的参数设为指定值&lt;sql:dateParam&gt; 将SQL语句中的日期参数设为指定的java.util.Date 对象值&lt;sql:transaction&gt; 在共享数据库连接中提供嵌套的数据库行为元素，将所有语句以一个事务的形式来运行 JSTL XML标签库提供了创建和操作XML文档的标签。引用XML标签库的语法如下： 12345678910111213141516&lt;%@ taglib prefix=&quot;x&quot; uri=&quot;http://java.sun.com/jsp/jstl/xml&quot; %&gt;//在使用xml标签前，你必须将XML 和 XPath 的相关包拷贝至你的&lt;Tomcat 安装目录&gt;\\lib下://XercesImpl.jar//下载地址： http://www.apache.org/dist/xerces/j///xalan.jar//下载地址： http://xml.apache.org/xalan-j/index.html&lt;x:out&gt; 与&lt;%= ... &gt;,类似，不过只用于XPath表达式&lt;x:parse&gt; 解析 XML 数据&lt;x:set&gt; 设置XPath表达式&lt;x:if&gt; 判断XPath表达式，若为真，则执行本体中的内容，否则跳过本体&lt;x:forEach&gt; 迭代XML文档中的节点&lt;x:choose&gt; &lt;x:when&gt;和&lt;x:otherwise&gt;的父标签&lt;x:when&gt; &lt;x:choose&gt;的子标签，用来进行条件判断&lt;x:otherwise&gt; &lt;x:choose&gt;的子标签，当&lt;x:when&gt;判断为false时被执行&lt;x:transform&gt; 将XSL转换应用在XML文档中&lt;x:param&gt; 与&lt;x:transform&gt;共同使用，用于设置XSL样式表 JSTL包含一系列标准函数，大部分是通用的字符串处理函数。引用JSTL函数库的语法如下： 1234567891011121314151617&lt;%@ taglib prefix=&quot;fn&quot; uri=&quot;http://java.sun.com/jsp/jstl/functions&quot; %&gt;fn:contains() 测试输入的字符串是否包含指定的子串fn:containsIgnoreCase() 测试输入的字符串是否包含指定的子串，大小写不敏感fn:endsWith() 测试输入的字符串是否以指定的后缀结尾fn:escapeXml() 跳过可以作为XML标记的字符fn:indexOf() 返回指定字符串在输入字符串中出现的位置fn:join() 将数组中的元素合成一个字符串然后输出fn:length() 返回字符串长度fn:replace() 将输入字符串中指定的位置替换为指定的字符串然后返回fn:split() 将字符串用指定的分隔符分隔然后组成一个子字符串数组并返回fn:startsWith() 测试输入字符串是否以指定的前缀开始fn:substring() 返回字符串的子集fn:substringAfter() 返回字符串在指定子串之后的子集fn:substringBefore() 返回字符串在指定子串之前的子集fn:toLowerCase() 将字符串中的字符转为小写fn:toUpperCase() 将字符串中的字符转为大写fn:trim() 移除首位的空白符","tags":[{"name":"JSP","slug":"JSP","permalink":"https://blog.bidd.net/tags/JSP/"},{"name":"JSTL","slug":"JSTL","permalink":"https://blog.bidd.net/tags/JSTL/"}]},{"title":"Android APP杀不死（最大存活方法）","date":"2017-02-27T13:30:22.000Z","path":"2017/02/27/cb6acfdbe4ca/","text":"有很多APP和需求，需要让APP不被系统杀死。然而，我在这里，必须明确的跟各位安卓开发者说的就是，这个需求就跟让物理学家发明永动机一样，是不可行的。然而，我们却可以尽最大的可能性让APP存活下来。实现最大存活有多种方式，网上的各位大牛，也有列出方法，我也想在这里，系统的总结一下。但暂时没能一下就全列出来，后面，想到哪个就再补上来，或者如果您有好的建议，直接在评论处给个建议，我会将您的建议列入。 针对6.0+系统，忽略电池优化功能。优点是锁屏后，还能让APP一直运行。缺点是，用户可能不同意。 123456789101112/** * 忽略电池优化 */public void ignoreBatteryOptimization(Activity activity) &#123; PowerManager powerManager = (PowerManager) getSystemService(POWER_SERVICE); boolean hasIgnored = powerManager.isIgnoringBatteryOptimizations(activity.getPackageName()); // 判断当前APP是否有加入电池优化的白名单，如果没有，弹出加入电池优化的白名单的设置对话框。 if(!hasIgnored) &#123; Intent intent = new Intent(Settings.ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS); intent.setData(Uri.parse(&quot;package:&quot;+activity.getPackageName())); startActivity(intent); &#125;&#125;// 在AndroidManifest.xml里加入以下权限。android:name=&quot;android.permission.REQUEST_IGNORE_BATTERY_OPTIMIZATIONS&quot;/&gt; 接入极光、友盟等第三方SDK。这些第三方SDK，普遍有“互拉”的功能。特别是友盟，居然连UC都有。UC现在，普及程度不比微信低多少。接入这些第三方SDK的优点是，实现互拉，可以大大的增加APP存活机率，哪怕APP被killed了，也能被拉起来。但是，弊端也有。就是有些Android系统，已经出现了禁止互拉功能的选项了，不过，用户一般不会去操作吧。 开一个后台服务，通过设置android:process属性，来让这个后台与APP处于不同进程，来达到互相监听，互相唤醒。然而实际情况呢？优点是，在部分机子上，确实可以。。但部分机子上，当APP被杀后，这些“处于不同进程的服务“也照样被杀。据说，有些机子杀APP是直接把APP相关的进程池都清空掉。所以，这种方法，不一定行得通。 开一个后台服务，通过设置android:process属性，来让这个后台与APP处于不同进程，来达到互相监听，互相唤醒。然而实际情况呢？优点是，在部分机子上，确实可以。。但部分机子上，当APP被杀后，这些“处于不同进程的服务“也照样被杀。据说，有些机子杀APP是直接把APP相关的进程池都清空掉。所以，这种方法，不一定行得通。 还有一种！杀不死服务实现原理： Android一个app可以启动2个进程 2：进程A与进程B互相守护 3：进程A时刻盯着进程B，通用进程B也时刻盯着进程B 进程之间互相盯着，需要用到IPC进程间通信技术（也就是Binder机制AIDL 注意配置远程服务启动为一个新的进程，为新进程命名为 android:process&#x3D;”.remoteService” 进程A服务绑定进程B服务，进程B服务绑定进程A服务！！！！","tags":[{"name":"To kill","slug":"To-kill","permalink":"https://blog.bidd.net/tags/To-kill/"}]},{"title":"记事本(notepad)自动加注日期和时间","date":"2017-02-26T11:04:35.000Z","path":"2017/02/26/f6b1eae81e95/","text":"每次打开记事本，想在最后加上时间，表明什么时间改动过，手动太麻烦，然后通过百度，记事本有一个自动加的方法，记录下来 按“Ctrl+Home”键将光标定位到文档的开头，然后输入“.LOG”（一律是大写字母）并回车，再按“Ctrl+S”保存文档，这样以后每次打开文档时，记事本程序将会自动插入当前的日期和时间了","tags":[{"name":"notepad","slug":"notepad","permalink":"https://blog.bidd.net/tags/notepad/"}]},{"title":"JS随机数","date":"2017-02-26T10:48:22.000Z","path":"2017/02/26/c4b87265acff/","text":"Math.random()结果为0-1间的一个随机数(包括0,不包括1) Math：数学对象，提供对数据的数学计算。 Math.random(); 返回0和1间(包括0,不包括1)的一个随机数。 Math.ceil(n); 返回大于等于n的最小整数。用Math.ceil(Math.random()*10);时，主要获取1到10的随机整数，取0的几率极小。 Math.floor(num);参数num为一个数值，函数结果为num的整数部分。Math.floor(n); 返回小于等于n的最大整数。用Math.floor(Math.random()*10);时，可均衡获取0到9的随机整数。 Math.round(num);参数num为一个数值，函数结果为num四舍五入后的整数。用Math.round(Math.random());可均衡获取0到1的随机整数。用Math.round(Math.random()*10);时，可基本均衡获取0到10的随机整数，其中获取最小值0和最大值10的几率少一半。","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://blog.bidd.net/tags/JavaScript/"}]},{"title":"Autodesk Netfabb Premium破解方法","date":"2017-02-23T07:25:22.000Z","path":"2017/02/23/0060256fe0e2/","text":"处理模型需要这东西，然后百度破解方法，真心被“输入序列号：066-66666666，激活码：A961，点击Next”这句坑死（我被坑了两次）这里更正下，激活码是 1A96i1 6和1中间还有一个字母[i]","tags":[]},{"title":"onpropertychange替代方法","date":"2017-02-16T07:28:51.000Z","path":"2017/02/16/69355e8e2265/","text":"百度一堆什么oninput、onchang等等方法，都不是我要的，input:hidden,js更改value值得话，只有onpropertychange能监听到，所以研究出这个定时器检查方法主要方法如下 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152//数据缓存var onpropertychanges_byxl = &#123; data : Array(), forData : Array(), FunData : Array(), getData : function(key)&#123; return this.data[key]; &#125;, getFunData : function(key)&#123; return this.FunData[key]; &#125;, getIds : function()&#123; return this.forData; &#125;, setData : function(key, value) &#123; this.data[key] = value; this.forData.push(key); return; &#125;, setFunData : function(key, value) &#123; this.FunData[key] = value; return; &#125;, updateData : function(key,value)&#123; this.data[key]=null; this.data[key]=value; &#125;&#125;;//添加监听数据function addUpdateListener(id,method)&#123; onpropertychanges_byxl.setData(id,document.getElementById(id).value); onpropertychanges_byxl.setFunData(id,method);&#125;//清除定时//window.clearInterval(timeid);function isUpdate_byxl()&#123; var ar=onpropertychanges_byxl.getIds(); for (var i = 0; i &lt; ar.length; i++) &#123; var a=document.getElementById(ar[i]).value; a=onpropertychanges_byxl.getData(ar[i]); //判断数据是否改变 if(document.getElementById(ar[i]).value!=onpropertychanges_byxl.getData(ar[i]))&#123; //执行方法 onpropertychanges_byxl.getFunData(ar[i])(); //更新数据 onpropertychanges_byxl.updateData(ar[i],document.getElementById(ar[i]).value) &#125; &#125;&#125;//启动定时器window.setInterval(isUpdate_byxl,300); 上面一段可进行压缩加密 1eval(function(p,a,c,k,e,r)&#123;e=function(c)&#123;return c.toString(a)&#125;;if(!&#x27;&#x27;.replace(/^/,String))&#123;while(c--)r[e(c)]=k[c]||e(c);k=[function(e)&#123;return r[e]&#125;];e=function()&#123;return&#x27;\\\\w+&#x27;&#125;;c=1&#125;;while(c--)if(k[c])p=p.replace(new RegExp(&#x27;\\\\b&#x27;+e(c)+&#x27;\\\\b&#x27;,&#x27;g&#x27;),k[c]);return p&#125;(&#x27;j 3=&#123;4:[],d:[],9:[],7:2(a)&#123;c 1.4[a]&#125;,i:2(a)&#123;c 1.9[a]&#125;,e:2()&#123;c 1.d&#125;,h:2(a,b)&#123;1.4[a]=b;1.d.s(a)&#125;,f:2(a,b)&#123;1.9[a]=b&#125;,g:2(a,b)&#123;1.4[a]=l;1.4[a]=b&#125;&#125;;2 m(a,b)&#123;3.h(a,5.6(a).8);3.f(a,b)&#125;2 k()&#123;o(j a=3.e(),b=0;b&lt;a.p;b++)5.6(a[b]),3.7(a[b]),5.6(a[b]).8!=3.7(a[b])&amp;&amp;(3.i(a[b])(),3.g(a[b],5.6(a[b]).8))&#125;q.r(k,n);&#x27;,29,29,&#x27;|this|function|onpropertychanges_byxl|data|document|getElementById|getData|value|FunData|||return|forData|getIds|setFunData|updateData|setData|getFunData|var|isUpdate_byxl|null|addUpdateListener|300|for|length|window|setInterval|push&#x27;.split(&#x27;|&#x27;),0,&#123;&#125;)) 调用方式 12345678910111213141516171819202122232425//&lt;input type=&quot;hidden&quot; name=&quot;&quot; id=&quot;test&quot; value=&quot;1&quot;&gt;//&lt;input type=&quot;hidden&quot; name=&quot;&quot; id=&quot;test1&quot; value=&quot;1&quot;&gt;//&lt;input type=&quot;hidden&quot; name=&quot;&quot; id=&quot;test2&quot; value=&quot;1&quot;&gt;function testFun()&#123; console.log(&quot;1&quot;);&#125;function tests()&#123; console.log(&quot;2&quot;);&#125;function testss()&#123; console.log(&quot;3&quot;);&#125;//id为test的input的value值改变时执行testFun方法addUpdateListener(&quot;test&quot;,testFun);//id为test1的input的value值改变时执行tests方法addUpdateListener(&quot;test1&quot;,tests);//id为test2的input的value值改变时执行testss方法addUpdateListener(&quot;test2&quot;,testss);//或者addUpdateListener(&quot;test2&quot;,function()&#123;//执行代码&#125;);","tags":[{"name":"onpropertychange","slug":"onpropertychange","permalink":"https://blog.bidd.net/tags/onpropertychange/"}]},{"title":"Java中文转简拼","date":"2017-02-14T07:22:09.000Z","path":"2017/02/14/5e364d4320e2/","text":"用于将中文字符串转换成简拼如：“你好abc123” -&gt; “NHABC123” 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849public static String toJP(String c)&#123; char[] chars = c.toCharArray(); StringBuffer sb = new StringBuffer(&quot;&quot;); for(int i=0;i&lt;chars.length;i++)&#123; sb.append(getJP(chars[i])); &#125; return sb.toString().toUpperCase(); &#125; public static String getJP(char c) &#123; byte[] array = new byte[2]; try &#123; array = String.valueOf(c).getBytes(&quot;gbk&quot;); &#125; catch (UnsupportedEncodingException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; if(array.length&lt;2)return String.valueOf(c); int i = (short) (array[0] - &#x27;\\0&#x27; + 256) * 256 + ((short) (array[1] - &#x27;\\0&#x27; + 256)); if ( i &lt; 0xB0A1) return String.valueOf(c); if ( i &lt; 0xB0C5) return &quot;a&quot;; if ( i &lt; 0xB2C1) return &quot;b&quot;; if ( i &lt; 0xB4EE) return &quot;c&quot;; if ( i &lt; 0xB6EA) return &quot;d&quot;; if ( i &lt; 0xB7A2) return &quot;e&quot;; if ( i &lt; 0xB8C1) return &quot;f&quot;; if ( i &lt; 0xB9FE) return &quot;g&quot;; if ( i &lt; 0xBBF7) return &quot;h&quot;; if ( i &lt; 0xBFA6) return &quot;j&quot;; if ( i &lt; 0xC0AC) return &quot;k&quot;; if ( i &lt; 0xC2E8) return &quot;l&quot;; if ( i &lt; 0xC4C3) return &quot;m&quot;; if ( i &lt; 0xC5B6) return &quot;n&quot;; if ( i &lt; 0xC5BE) return &quot;o&quot;; if ( i &lt; 0xC6DA) return &quot;p&quot;; if ( i &lt; 0xC8BB) return &quot;q&quot;; if ( i &lt; 0xC8F6) return &quot;r&quot;; if ( i &lt; 0xCBFA) return &quot;s&quot;; if ( i &lt; 0xCDDA) return &quot;t&quot;; if ( i &lt; 0xCEF4) return &quot;w&quot;; if ( i &lt; 0xD1B9) return &quot;x&quot;; if ( i &lt; 0xD4D1) return &quot;y&quot;; if ( i &lt; 0xD7FA) return &quot;z&quot;; return String.valueOf(c); &#125;","tags":[{"name":"中文转拼音","slug":"中文转拼音","permalink":"https://blog.bidd.net/tags/%E4%B8%AD%E6%96%87%E8%BD%AC%E6%8B%BC%E9%9F%B3/"}]},{"title":"JS身份证验证","date":"2017-02-09T06:05:44.000Z","path":"2017/02/09/454d88002707/","text":"号码的结构 公民身份号码是特征组合码，由十七位数字本体码和一位校验码组成。排列顺序从左至右依次为：六位数字地址码，八位数字出生日期码，三位数字顺序码和一位数字校验码。 地址码(前六位数）表示编码对象常住户口所在县(市、旗、区)的行政区划代码，按GB&#x2F;T2260的规定执行。 出生日期码（第七位至十四位）表示编码对象出生的年、月、日，按GB&#x2F;T7408的规定执行，年、月、日代码之间不用分隔符。 顺序码（第十五位至十七位）表示在同一地址码所标识的区域范围内，对同年、同月、同日出生的人编定的顺序号， 顺序码的奇数分配给男性，偶数分配给女性。 校验码（第十八位数） 十七位数字本体码加权求和公式 S &#x3D; Sum(Ai * Wi), i &#x3D; 0, … , 16 ，先对前17位数字的权求和Ai:表示第i位置上的身份证号码数字值Wi:表示第i位置上的加权因子 Wi: 7 9 10 5 8 4 2 1 6 3 7 9 10 5 8 4 2 计算模 Y &#x3D; mod(S, 11) 通过模得到对应的校验码 Y: 0 1 2 3 4 5 6 7 8 9 10 校验码: 1 0 X 9 8 7 6 5 4 3 2此处将使用一个全国的地址码 GB2260，在下面的下载地址可以看到。function IDValidator() &#123; var param = &#123; error : &#123; longNumber : &#x27;长数字存在精度问题，请使用字符串传值！ Long number is not allowed, because the precision of the Number In JavaScript.&#x27; &#125; &#125;; var util = &#123; checkArg : function(id) &#123; var argType = (typeof id); switch (argType) &#123; case &#x27;number&#x27;: // long number not allowed id = id.toString(); if (id.length &gt; 15) &#123; this.error(param.error.longNumber); return false; &#125; break; case &#x27;string&#x27;: break; default: return false; &#125; id = id.toUpperCase(); var code = null; if (id.length === 18) &#123; // 18位 code = &#123; body : id.slice(0, 17), checkBit : id.slice(-1), type : 18 &#125;; &#125; else if (id.length === 15) &#123; // 15位 code = &#123; body : id, type : 15 &#125;; &#125; else &#123; return false; &#125; return code; &#125; // 地址码检查 , checkAddr : function(addr, GB2260) &#123; var addrInfo = this.getAddrInfo(addr, GB2260); return (addrInfo === false ? false : true); &#125; // 取得地址码信息 , getAddrInfo : function(addr, GB2260) &#123; GB2260 = GB2260 || null; // 查询GB/T2260,没有引入GB2260时略过 if (GB2260 === null) &#123; return addr; &#125; if (!GB2260.hasOwnProperty(addr)) &#123; // 考虑标准不全的情况，搜索不到时向上搜索 var tmpAddr; tmpAddr = addr.slice(0, 4) + &#x27;00&#x27;; if (!GB2260.hasOwnProperty(tmpAddr)) &#123; tmpAddr = addr.slice(0, 2) + &#x27;0000&#x27;; if (!GB2260.hasOwnProperty(tmpAddr)) &#123; return false; &#125; else &#123; return GB2260[tmpAddr] + &#x27;未知地区&#x27;; &#125; &#125; else &#123; return GB2260[tmpAddr] + &#x27;未知地区&#x27;; &#125; &#125; else &#123; return GB2260[addr]; &#125; &#125; // 生日码检查 , checkBirth : function(birth) &#123; var year, month, day; if (birth.length == 8) &#123; year = parseInt(birth.slice(0, 4), 10); month = parseInt(birth.slice(4, 6), 10); day = parseInt(birth.slice(-2), 10); &#125; else if (birth.length == 6) &#123; year = parseInt(&#x27;19&#x27; + birth.slice(0, 2), 10); month = parseInt(birth.slice(2, 4), 10); day = parseInt(birth.slice(-2), 10); &#125; else &#123; return false; &#125; // TODO 是否需要判断年份 /* * if( year&lt;1800 )&#123; return false; &#125; */ // TODO 按月份检测 if (month &gt; 12 || month === 0 || day &gt; 31 || day === 0) &#123; return false; &#125; return true; &#125; // 顺序码检查 , checkOrder : function(order) &#123; // 暂无需检测 return true; &#125; // 加权 , weight : function(t) &#123; return Math.pow(2, t - 1) % 11; &#125; // 随机整数 , rand : function(max, min) &#123; min = min || 1; return Math.round(Math.random() * (max - min)) + min; &#125; // 数字补位 , str_pad : function(str, len, chr, right) &#123; str = str.toString(); len = len || 2; chr = chr || &#x27;0&#x27;; right = right || false; if (str.length &gt;= len) &#123; return str; &#125; else &#123; for (var i = 0, j = len - str.length; i &lt; j; i++) &#123; if (right) &#123; str = str + chr; &#125; else &#123; str = chr + str; &#125; &#125; return str; &#125; &#125; // 抛错 , error : function(msg) &#123; var e = new Error(); e.message = &#x27;IDValidator: &#x27; + msg; throw e; &#125; &#125;; var _IDValidator = function(GB2260) &#123; if (typeof GB2260 !== &quot;undefined&quot;) &#123; this.GB2260 = GB2260; &#125; // 建立cache this.cache = &#123;&#125;; &#125;; _IDValidator.prototype = &#123; isValid : function(id) &#123; var GB2260 = this.GB2260 || null; var code = util.checkArg(id); if (code === false) &#123; return false; &#125; // 查询cache if (this.cache.hasOwnProperty(id) &amp;&amp; typeof this.cache[id].valid !== &#x27;undefined&#x27;) &#123; return this.cache[id].valid; &#125; else &#123; if (!this.cache.hasOwnProperty(id)) &#123; this.cache[id] = &#123;&#125;; &#125; &#125; var addr = code.body.slice(0, 6); var birth = (code.type === 18 ? code.body.slice(6, 14) : code.body .slice(6, 12)); var order = code.body.slice(-3); if (!(util.checkAddr(addr, GB2260) &amp;&amp; util.checkBirth(birth) &amp;&amp; util .checkOrder(order))) &#123; this.cache[id].valid = false; return false; &#125; // 15位不含校验码，到此已结束 if (code.type === 15) &#123; this.cache[id].valid = true; return true; &#125; /* 校验位部分 */ // 位置加权 var posWeight = []; for (var i = 18; i &gt; 1; i--) &#123; var wei = util.weight(i); posWeight[i] = wei; &#125; // 累加body部分与位置加权的积 var bodySum = 0; var bodyArr = code.body.split(&#x27;&#x27;); for (var j = 0; j &lt; bodyArr.length; j++) &#123; bodySum += (parseInt(bodyArr[j], 10) * posWeight[18 - j]); &#125; // 得出校验码 var checkBit = 12 - (bodySum % 11); if (checkBit == 10) &#123; checkBit = &#x27;X&#x27;; &#125; else if (checkBit &gt; 10) &#123; checkBit = checkBit % 11; &#125; checkBit = (typeof checkBit === &#x27;number&#x27; ? checkBit.toString() : checkBit); // 检查校验码 if (checkBit !== code.checkBit) &#123; this.cache[id].valid = false; return false; &#125; else &#123; this.cache[id].valid = true; return true; &#125; &#125; // 分析详细信息 , getInfo : function(id) &#123; var GB2260 = this.GB2260 || null; // 号码必须有效 if (this.isValid(id) === false) &#123; return false; &#125; // TODO 复用此部分 var code = util.checkArg(id); // 查询cache // 到此时通过isValid已经有了cache记录 if (typeof this.cache[id].info !== &#x27;undefined&#x27;) &#123; return this.cache[id].info; &#125; var addr = code.body.slice(0, 6); var birth = (code.type === 18 ? code.body.slice(6, 14) : code.body .slice(6, 12)); var order = code.body.slice(-3); var info = &#123;&#125;; info.addrCode = addr; if (GB2260 !== null) &#123; info.addr = util.getAddrInfo(addr, GB2260); &#125; info.birth = (code.type === 18 ? (([ birth.slice(0, 4), birth.slice(4, 6), birth.slice(-2) ]).join(&#x27;-&#x27;)) : ([ &#x27;19&#x27; + birth.slice(0, 2), birth.slice(2, 4), birth.slice(-2) ]).join(&#x27;-&#x27;)); info.sex = (order % 2 === 0 ? 0 : 1); info.length = code.type; if (code.type === 18) &#123; info.checkBit = code.checkBit; &#125; // 记录cache this.cache[id].info = info; return info; &#125; // 仿造一个号 , makeID : function(isFifteen) &#123; var GB2260 = this.GB2260 || null; // 地址码 var addr = null; if (GB2260 !== null) &#123; var loopCnt = 0; while (addr === null) &#123; // 防止死循环 if (loopCnt &gt; 10) &#123; addr = 110101; break; &#125; var prov = util.str_pad(util.rand(50), 2, &#x27;0&#x27;); var city = util.str_pad(util.rand(20), 2, &#x27;0&#x27;); var area = util.str_pad(util.rand(20), 2, &#x27;0&#x27;); var addrTest = [ prov, city, area ].join(&#x27;&#x27;); if (GB2260[addrTest]) &#123; addr = addrTest; break; &#125; &#125; &#125; else &#123; addr = 110101; &#125; // 出生年 var yr = util.str_pad(util.rand(99, 50), 2, &#x27;0&#x27;); var mo = util.str_pad(util.rand(12, 1), 2, &#x27;0&#x27;); var da = util.str_pad(util.rand(28, 1), 2, &#x27;0&#x27;); if (isFifteen) &#123; return addr + yr + mo + da + util.str_pad(util.rand(999, 1), 3, &#x27;1&#x27;); &#125; yr = &#x27;19&#x27; + yr; var body = addr + yr + mo + da + util.str_pad(util.rand(999, 1), 3, &#x27;1&#x27;); // 位置加权 var posWeight = []; for (var i = 18; i &gt; 1; i--) &#123; var wei = util.weight(i); posWeight[i] = wei; &#125; // 累加body部分与位置加权的积 var bodySum = 0; var bodyArr = body.split(&#x27;&#x27;); for (var j = 0; j &lt; bodyArr.length; j++) &#123; bodySum += (parseInt(bodyArr[j], 10) * posWeight[18 - j]); &#125; // 得出校验码 var checkBit = 12 - (bodySum % 11); if (checkBit == 10) &#123; checkBit = &#x27;X&#x27;; &#125; else if (checkBit &gt; 10) &#123; checkBit = checkBit % 11; &#125; checkBit = (typeof checkBit === &#x27;number&#x27; ? checkBit.toString() : checkBit); return (body + checkBit); &#125; &#125;;// _IDValidator GB2260 = GB2260 == null ? &quot;&quot; : GB2260; return new _IDValidator(GB2260);&#125; 调用方法1234567891011121314151617//新建普通实例var Validator = new IDValidator();//或使用带地址码实例,需要引入GB2260//var Validator = IDValidator(GB2260);//验证号码是否合法，合法返回true，不合法返回falseValidator.isValid(code);//号码合法时返回分析信息（地区、出生日期、性别、校验位），不合法返回falseValidator.getInfo(code);//仿造一个18位身份证号Validator.makeID();//仿造一个15位身份证号Validator.makeID(true);","tags":[{"name":"JS","slug":"JS","permalink":"https://blog.bidd.net/tags/JS/"},{"name":"身份证验证","slug":"身份证验证","permalink":"https://blog.bidd.net/tags/%E8%BA%AB%E4%BB%BD%E8%AF%81%E9%AA%8C%E8%AF%81/"}]},{"title":"Android开发板SHA1和发布版SHA1获取","date":"2016-12-18T12:04:35.000Z","path":"2016/12/18/8341ed247df4/","text":"开发版打开命令行cd 至用户目录&#x2F;.android keytool -list -v -keystore debug.keystore 发布版基本步骤同上， keytool -list -v -keystore 文件目录\\自己的签名文件 只是debug.keystore改为自己的签名文件路径即可","tags":[{"name":"Android","slug":"Android","permalink":"https://blog.bidd.net/tags/Android/"},{"name":"SHA1","slug":"SHA1","permalink":"https://blog.bidd.net/tags/SHA1/"}]},{"title":"Sql Server查询结果中添加自增列","date":"2016-12-14T15:29:23.000Z","path":"2016/12/14/a46455c6895c/","text":"方法一1SELECT Row_Number() over ( order by getdate() ) as init , * FROM 表名 方法二使用关键字IDENTITY创建临时表1SELECT IDENTITY(int,1,1) as Nid,* INTO #T FROM 表名 SELECT * FROM #T","tags":[{"name":"HTML5","slug":"HTML5","permalink":"https://blog.bidd.net/tags/HTML5/"}]},{"title":"JavaScript 日期计算方法","date":"2016-12-14T13:53:00.000Z","path":"2016/12/14/6c8a61901a11/","text":"需注意Date()中的月是从0开始的 根据年月取周数和周一到周五的日期 12345678910111213141516171819202122232425262728293031323334353637 /** * 根据年月取周数和周一到周五的日期 * @param year * @param month */ function getInfo(year, month) &#123; var result=[]; var d = new Date(); // what day is first day d.setFullYear(year, month-1, 1); var w1 = d.getDay(); if (w1 == 0) w1 = 7; // total day of month d.setFullYear(year, month, 0); var dd = d.getDate(); // first Monday var d1,week_count; if (w1 != 1) d1 = 7 - w1 + 2; else d1 = 1; week_count = Math.ceil((dd-d1+1)/7);//周数 result[0]=week_count;// document.write(year + &quot;年&quot; + month + &quot;月有&quot; + week_count +&quot;周&quot;); for (var i = 0; i &lt; week_count; i++) &#123; var monday = d1+i*7; var sunday = monday + 6; var from = year+&quot;/&quot;+month+&quot;/&quot;+monday; var to; if (sunday &lt;= dd) &#123; to = year+&quot;/&quot;+month+&quot;/&quot;+sunday; &#125; else &#123; d.setFullYear(year, month-1, sunday); to = d.getFullYear()+&quot;/&quot;+(d.getMonth()+1)+&quot;/&quot;+d.getDate(); &#125; document.write(&quot;第&quot;+(i+1)+&quot;周 从&quot; + from + &quot; 到 &quot; + to + &quot;&quot;); &#125; return result; &#125; 根据年月日判断是一年中的第几周1234567891011121314151617181920212223242526272829303132333435363738394041424344454647/** * 判断年份是否为润年 * * @param &#123;Number&#125; year */function isLeapYear(year) &#123; return (year % 400 == 0) || (year % 4 == 0 &amp;&amp; year % 100 != 0);&#125;/** * 获取某一年份的某一月份的天数 * * @param &#123;Number&#125; year * @param &#123;Number&#125; month */function getMonthDays(year, month) &#123; return [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month] || (isLeapYear(year) ? 29 : 28);&#125;/** * 获取某年的某天是第几周 * @param &#123;Number&#125; y * @param &#123;Number&#125; m * @param &#123;Number&#125; d * @returns &#123;Number&#125; */function getWeekNumber(y, m, d) &#123; var now = new Date(y, m - 1, d), year = now.getFullYear(), month = now.getMonth(), days = now.getDate(); //那一天是那一年中的第多少天 for (var i = 0; i &lt; month; i++) &#123; days += getMonthDays(year, i); &#125; //那一年第一天是星期几 var yearFirstDay = new Date(year, 0, 1).getDay() || 7; var week = null; if (yearFirstDay == 1) &#123; week = Math.ceil(days / yearFirstDay); &#125; else &#123; days -= (7 - yearFirstDay + 1); week = Math.ceil(days / 7) + 1; &#125; return week;&#125;","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://blog.bidd.net/tags/JavaScript/"}]},{"title":"HTML5多线程Web Worker","date":"2016-12-09T07:08:52.000Z","path":"2016/12/09/9410f9d4b2bd/","text":"主线程js123456789101112131415//创建worker对象，参数为需线程执行的js文件var worker = new Worker(&#x27;new.js&#x27;);var ar=new Array();var obj=new Object();obj.s=&quot;123&quot;;ar[0]=obj;ar[1]=&quot;1234&quot;//想new.js发送数据worker.postMessage(ar);//接收worker传递过来的数据worker.onmessage = function(data)&#123;//输出传回的数据 console.log(data.data); worker.terminate();//终止线程&#125;; 支线程new.js12345//监听主线程消息onmessage=function(data) &#123;//向主线程发送消息 postMessage(data.data[1]);&#125; Worker有局限性，它不能操作DOM，否则会出现如下错误，就算加进去了也是一个副本Uncaught DataCloneError: Failed to execute ‘postMessage’ on ‘Worker’: An object could not be cloned.","tags":[{"name":"HTML5","slug":"HTML5","permalink":"https://blog.bidd.net/tags/HTML5/"}]},{"title":"替换mysql中某个字段中的字符","date":"2016-11-30T04:06:19.000Z","path":"2016/11/30/33ecdcf562ef/","text":"用于替换字段中的值的某字符串 update wp_posts set post_content &#x3D; replace(post_content,’[&#x2F;java]’,’[&#x2F;pre]’);","tags":[{"name":"MySql","slug":"MySql","permalink":"https://blog.bidd.net/tags/MySql/"}]},{"title":"键盘键控代码值和 ASCII","date":"2016-10-31T05:58:43.000Z","path":"2016/10/31/db2632af7746/","text":"标准键盘 字母或数字键键控代码ASCII键控代码A6565B6666C6767D6868E6969F7070G7171H7272I7373J7474K7575L7676M7777N7878O7979P8080Q8181R8282S8383T8484U8585V8686W8787X8888Y8989Z909004848149492505035151452525535365454755558565695757a6597b6698c6799d68100e69101f70102g71103h72104i73105j74106k75107l76108m77109n78110o79111p80112q81113r82114s83115t84116u85117v86118w87119x88120y89121z90122 # 数字键盘 数字键盘键键控代码ASCII键控代码数字键盘09648数字键盘19749数字键盘29850数字键盘39951数字键盘410052数字键盘510153数字键盘610254数字键盘710355数字键盘810456数字键盘910557乘号10642加号10743Enter1313减号10945小数点11046除号11147 # 标准键盘上的功能键 功能键键控代码ASCII键控代码F11120F21130F31140F41150F51160F61170F71180F81190F91200F10此键是系统保留的，不能在ActionScript中使用。此键是系统保留的，不能在ActionScript中使用。F111220F121230F131240F141250F151260 # 标准键盘上除了字母、数字、数字键盘键和功能键之外的其它键 Key键控代码ASCII键控代码Backspace88Tab99Enter1313Shift160Control170Caps Lock200Esc2727空格键3232Page Up330Page Down340End350Home360左箭头370向上箭头380右箭头390向下箭头400Insert450Delete46127Num Lock1440ScrLk1450Pause/Break190;:18659=+18761-_18945/?19147`~19296[{21991\\|22092]}22193“ ‘22239,18844.19046/19147","tags":[{"name":"KeyCode","slug":"KeyCode","permalink":"https://blog.bidd.net/tags/KeyCode/"}]},{"title":"RGB颜色对照表","date":"2016-10-27T07:15:24.000Z","path":"2016/10/27/498475ecfeda/","text":"方便查询 实色效果英文名称R.G.B16色实色效果英文名称R.G.B16色Snow255 250 250#FFFAFAPaleTurquoise1187 255 255#BBFFFFGhostWhite248 248 255#F8F8FFPaleTurquoise2174 238 238#AEEEEEWhiteSmoke245 245 245#F5F5F5PaleTurquoise3150 205 205#96CDCDGainsboro220 220 220#DCDCDCPaleTurquoise4102 139 139#668B8BFloralWhite255 250 240#FFFAF0CadetBlue1152 245 255#98F5FFOldLace253 245 230#FDF5E6CadetBlue2142 229 238#8EE5EELinen250 240 230#FAF0E6CadetBlue3122 197 205#7AC5CDAntiqueWhite250 235 215#FAEBD7CadetBlue483 134 139#53868BPapayaWhip255 239 213#FFEFD5Turquoise10 245 255#00F5FFBlanchedAlmond255 235 205#FFEBCDTurquoise20 229 238#00E5EEBisque255 228 196#FFE4C4Turquoise30 197 205#00C5CDPeachPuff255 218 185#FFDAB9Turquoise40 134 139#00868BNavajoWhite255 222 173#FFDEADCyan10 255 255#00FFFFMoccasin255 228 181#FFE4B5Cyan20 238 238#00EEEECornsilk255 248 220#FFF8DCCyan30 205 205#00CDCDIvory255 255 240#FFFFF0Cyan40 139 139#008B8BLemonChiffon255 250 205#FFFACDDarkSlateGray1151 255 255#97FFFFSeashell255 245 238#FFF5EEDarkSlateGray2141 238 238#8DEEEEHoneydew240 255 240#F0FFF0DarkSlateGray3121 205 205#79CDCDMintCream245 255 250#F5FFFADarkSlateGray482 139 139#528B8BAzure240 255 255#F0FFFFAquamarine1127 255 212#7FFFD4AliceBlue240 248 255#F0F8FFAquamarine2118 238 198#76EEC6lavender230 230 250#E6E6FAAquamarine3102 205 170#66CDAALavenderBlush255 240 245#FFF0F5Aquamarine469 139 116#458B74MistyRose255 228 225#FFE4E1DarkSeaGreen1193 255 193#C1FFC1White255 255 255#FFFFFFDarkSeaGreen2180 238 180#B4EEB4Black0 0 0#000000DarkSeaGreen3155 205 155#9BCD9BDarkSlateGray47 79 79#2F4F4FDarkSeaGreen4105 139 105#698B69DimGrey105 105 105#696969SeaGreen184 255 159#54FF9FSlateGrey112 128 144#708090SeaGreen278 238 148#4EEE94LightSlateGray119 136 153#778899SeaGreen367 205 128#43CD80Grey190 190 190#BEBEBESeaGreen446 139 87#2E8B57LightGray211 211 211#D3D3D3PaleGreen1154 255 154#9AFF9AMidnightBlue25 25 112#191970PaleGreen2144 238 144#90EE90NavyBlue0 0 128#000080PaleGreen3124 205 124#7CCD7CCornflowerBlue100 149 237#6495EDPaleGreen484 139 84#548B54DarkSlateBlue72 61 139#483D8BSpringGreen10 255 127#00FF7FSlateBlue106 90 205#6A5ACDSpringGreen20 238 118#00EE76MediumSlateBlue123 104 238#7B68EESpringGreen30 205 102#00CD66LightSlateBlue132 112 255#8470FFSpringGreen40 139 69#008B45MediumBlue0 0 205#0000CDGreen10 255 0#00FF00RoyalBlue65 105 225#4169E1Green20 238 0#00EE00Blue0 0 255#0000FFGreen30 205 0#00CD00DodgerBlue30 144 255#1E90FFGreen40 139 0#008B00DeepSkyBlue0 191 255#00BFFFChartreuse1127 255 0#7FFF00SkyBlue135 206 235#87CEEBChartreuse2118 238 0#76EE00LightSkyBlue135 206 250#87CEFAChartreuse3102 205 0#66CD00SteelBlue70 130 180#4682B4Chartreuse469 139 0#458B00LightSteelBlue176 196 222#B0C4DEOliveDrab1192 255 62#C0FF3ELightBlue173 216 230#ADD8E6OliveDrab2179 238 58#B3EE3APowderBlue176 224 230#B0E0E6OliveDrab3154 205 50#9ACD32PaleTurquoise175 238 238#AFEEEEOliveDrab4105 139 34#698B22DarkTurquoise0 206 209#00CED1DarkOliveGreen1202 255 112#CAFF70MediumTurquoise72 209 204#48D1CCDarkOliveGreen2188 238 104#BCEE68Turquoise64 224 208#40E0D0DarkOliveGreen3162 205 90#A2CD5ACyan0 255 255#00FFFFDarkOliveGreen4110 139 61#6E8B3DLightCyan224 255 255#E0FFFFKhaki1255 246 143#FFF68FCadetBlue95 158 160#5F9EA0Khaki2238 230 133#EEE685MediumAquamarine102 205 170#66CDAAKhaki3205 198 115#CDC673Aquamarine127 255 212#7FFFD4Khaki4139 134 78#8B864EDarkGreen0 100 0#006400LightGoldenrod1255 236 139#FFEC8BDarkOliveGreen85 107 47#556B2FLightGoldenrod2238 220 130#EEDC82DarkSeaGreen143 188 143#8FBC8FLightGoldenrod3205 190 112#CDBE70SeaGreen46 139 87#2E8B57LightGoldenrod4139 129 76#8B814CMediumSeaGreen60 179 113#3CB371LightYellow1255 255 224#FFFFE0LightSeaGreen32 178 170#20B2AALightYellow2238 238 209#EEEED1PaleGreen152 251 152#98FB98LightYellow3205 205 180#CDCDB4SpringGreen0 255 127#00FF7FLightYellow4139 139 122#8B8B7ALawnGreen124 252 0#7CFC00Yellow1255 255 0#FFFF00Green0 255 0#00FF00Yellow2238 238 0#EEEE00Chartreuse127 255 0#7FFF00Yellow3205 205 0#CDCD00MedSpringGreen0 250 154#00FA9AYellow4139 139 0#8B8B00GreenYellow173 255 47#ADFF2FGold1255 215 0#FFD700LimeGreen50 205 50#32CD32Gold2238 201 0#EEC900YellowGreen154 205 50#9ACD32Gold3205 173 0#CDAD00ForestGreen34 139 34#228B22Gold4139 117 0#8B7500OliveDrab107 142 35#6B8E23Goldenrod1255 193 37#FFC125DarkKhaki189 183 107#BDB76BGoldenrod2238 180 34#EEB422PaleGoldenrod238 232 170#EEE8AAGoldenrod3205 155 29#CD9B1DLtGoldenrodYello250 250 210#FAFAD2Goldenrod4139 105 20#8B6914LightYellow255 255 224#FFFFE0DarkGoldenrod1255 185 15#FFB90FYellow255 255 0#FFFF00DarkGoldenrod2238 173 14#EEAD0EGold255 215 0#FFD700DarkGoldenrod3205 149 12#CD950CLightGoldenrod238 221 130#EEDD82DarkGoldenrod4139 101 8#8B658Bgoldenrod218 165 32#DAA520RosyBrown1255 193 193#FFC1C1DarkGoldenrod184 134 11#B8860BRosyBrown2238 180 180#EEB4B4RosyBrown188 143 143#BC8F8FRosyBrown3205 155 155#CD9B9BIndianRed205 92 92#CD5C5CRosyBrown4139 105 105#8B6969SaddleBrown139 69 19#8B4513IndianRed1255 106 106#FF6A6ASienna160 82 45#A0522DIndianRed2238 99 99#EE6363Peru205 133 63#CD853FIndianRed3205 85 85#CD5555Burlywood222 184 135#DEB887IndianRed4139 58 58#8B3A3ABeige245 245 220#F5F5DCSienna1255 130 71#FF8247Wheat245 222 179#F5DEB3Sienna2238 121 66#EE7942SandyBrown244 164 96#F4A460Sienna3205 104 57#CD6839Tan210 180 140#D2B48CSienna4139 71 38#8B4726Chocolate210 105 30#D2691EBurlywood1255 211 155#FFD39BFirebrick178 34 34#B22222Burlywood2238 197 145#EEC591Brown165 42 42#A52A2ABurlywood3205 170 125#CDAA7DDarkSalmon233 150 122#E9967ABurlywood4139 115 85#8B7355Salmon250 128 114#FA8072Wheat1255 231 186#FFE7BALightSalmon255 160 122#FFA07AWheat2238 216 174#EED8AEOrange255 165 0#FFA500Wheat3205 186 150#CDBA96DarkOrange255 140 0#FF8C00Wheat4139 126 102#8B7E66Coral255 127 80#FF7F50Tan1255 165 79#FFA54FLightCoral240 128 128#F08080Tan2238 154 73#EE9A49Tomato255 99 71#FF6347Tan3205 133 63#CD853FOrangeRed255 69 0#FF4500Tan4139 90 43#8B5A2BRed255 0 0#FF0000Chocolate1255 127 36#FF7F24HotPink255 105 180#FF69B4Chocolate2238 118 33#EE7621DeepPink255 20 147#FF1493Chocolate3205 102 29#CD661DPink255 192 203#FFC0CBChocolate4139 69 19#8B4513LightPink255 182 193#FFB6C1Firebrick1255 48 48#FF3030PaleVioletRed219 112 147#DB7093Firebrick2238 44 44#EE2C2CMaroon176 48 96#B03060Firebrick3205 38 38#CD2626MediumVioletRed199 21 133#C71585Firebrick4139 26 26#8B1A1AVioletRed208 32 144#D02090Brown1255 64 64#FF4040Magenta255 0 255#FF00FFBrown2238 59 59#EE3B3BViolet238 130 238#EE82EEBrown3205 51 51#CD3333Plum221 160 221#DDA0DDBrown4139 35 35#8B2323Orchid218 112 214#DA70D6Salmon1255 140 105#FF8C69MediumOrchid186 85 211#BA55D3Salmon2238 130 98#EE8262DarkOrchid153 50 204#9932CCSalmon3205 112 84#CD7054DarkViolet148 0 211#9400D3Salmon4139 76 57#8B4C39BlueViolet138 43 226#8A2BE2LightSalmon1255 160 122#FFA07APurple160 32 240#A020F0LightSalmon2238 149 114#EE9572MediumPurple147 112 219#9370DBLightSalmon3205 129 98#CD8162Thistle216 191 216#D8BFD8LightSalmon4139 87 66#8B5742Snow1255 250 250#FFFAFAOrange1255 165 0#FFA500Snow2238 233 233#EEE9E9Orange2238 154 0#EE9A00Snow3205 201 201#CDC9C9Orange3205 133 0#CD8500Snow4139 137 137#8B8989Orange4139 90 0#8B5A00Seashell1255 245 238#FFF5EEDarkOrange1255 127 0#FF7F00Seashell2238 229 222#EEE5DEDarkOrange2238 118 0#EE7600Seashell3205 197 191#CDC5BFDarkOrange3205 102 0#CD6600Seashell4139 134 130#8B8682DarkOrange4139 69 0#8B4500AntiqueWhite1255 239 219#FFEFDBCoral1255 114 86#FF7256AntiqueWhite2238 223 204#EEDFCCCoral2238 106 80#EE6A50AntiqueWhite3205 192 176#CDC0B0Coral3205 91 69#CD5B45AntiqueWhite4139 131 120#8B8378Coral4139 62 47#8B3E2FBisque1255 228 196#FFE4C4Tomato1255 99 71#FF6347Bisque2238 213 183#EED5B7Tomato2238 92 66#EE5C42Bisque3205 183 158#CDB79ETomato3205 79 57#CD4F39Bisque4139 125 107#8B7D6BTomato4139 54 38#8B3626PeachPuff1255 218 185#FFDAB9OrangeRed1255 69 0#FF4500PeachPuff2238 203 173#EECBADOrangeRed2238 64 0#EE4000PeachPuff3205 175 149#CDAF95OrangeRed3205 55 0#CD3700PeachPuff4139 119 101#8B7765OrangeRed4139 37 0#8B2500NavajoWhite1255 222 173#FFDEADRed1255 0 0#FF0000NavajoWhite2238 207 161#EECFA1Red2238 0 0#EE0000NavajoWhite3205 179 139#CDB38BRed3205 0 0#CD0000NavajoWhite4139 121 94#8B795ERed4139 0 0#8B0000LemonChiffon1255 250 205#FFFACDDeepPink1255 20 147#FF1493LemonChiffon2238 233 191#EEE9BFDeepPink2238 18 137#EE1289LemonChiffon3205 201 165#CDC9A5DeepPink3205 16 118#CD1076LemonChiffon4139 137 112#8B8970DeepPink4139 10 80#8B0A50Cornsilk1255 248 220#FFF8DCHotPink1255 110 180#FF6EB4Cornsilk2238 232 205#EEE8CDHotPink2238 106 167#EE6AA7Cornsilk3205 200 177#CDC8B1HotPink3205 96 144#CD6090Cornsilk4139 136 120#8B8878HotPink4139 58 98#8B3A62Ivory1255 255 240#FFFFF0Pink1255 181 197#FFB5C5Ivory2238 238 224#EEEEE0Pink2238 169 184#EEA9B8Ivory3205 205 193#CDCDC1Pink3205 145 158#CD919EIvory4139 139 131#8B8B83Pink4139 99 108#8B636CHoneydew1240 255 240#F0FFF0LightPink1255 174 185#FFAEB9Honeydew2224 238 224#E0EEE0LightPink2238 162 173#EEA2ADHoneydew3193 205 193#C1CDC1LightPink3205 140 149#CD8C95Honeydew4131 139 131#838B83LightPink4139 95 101#8B5F65LavenderBlush1255 240 245#FFF0F5PaleVioletRed1255 130 171#FF82ABLavenderBlush2238 224 229#EEE0E5PaleVioletRed2238 121 159#EE799FLavenderBlush3205 193 197#CDC1C5PaleVioletRed3205 104 137#CD6889LavenderBlush4139 131 134#8B8386PaleVioletRed4139 71 93#8B475DMistyRose1255 228 225#FFE4E1Maroon1255 52 179#FF34B3MistyRose2238 213 210#EED5D2Maroon2238 48 167#EE30A7MistyRose3205 183 181#CDB7B5Maroon3205 41 144#CD2990MistyRose4139 125 123#8B7D7BMaroon4139 28 98#8B1C62Azure1240 255 255#F0FFFFVioletRed1255 62 150#FF3E96Azure2224 238 238#E0EEEEVioletRed2238 58 140#EE3A8CAzure3193 205 205#C1CDCDVioletRed3205 50 120#CD3278Azure4131 139 139#838B8BVioletRed4139 34 82#8B2252SlateBlue1131 111 255#836FFFMagenta1255 0 255#FF00FFSlateBlue2122 103 238#7A67EEMagenta2238 0 238#EE00EESlateBlue3105 89 205#6959CDMagenta3205 0 205#CD00CDSlateBlue471 60 139#473C8BMagenta4139 0 139#8B008BRoyalBlue172 118 255#4876FFOrchid1255 131 250#FF83FARoyalBlue267 110 238#436EEEOrchid2238 122 233#EE7AE9RoyalBlue358 95 205#3A5FCDOrchid3205 105 201#CD69C9RoyalBlue439 64 139#27408BOrchid4139 71 137#8B4789Blue10 0 255#0000FFPlum1255 187 255#FFBBFFBlue20 0 238#0000EEPlum2238 174 238#EEAEEEBlue30 0 205#0000CDPlum3205 150 205#CD96CDBlue40 0 139#00008BPlum4139 102 139#8B668BDodgerBlue130 144 255#1E90FFMediumOrchid1224 102 255#E066FFDodgerBlue228 134 238#1C86EEMediumOrchid2209 95 238#D15FEEDodgerBlue324 116 205#1874CDMediumOrchid3180 82 205#B452CDDodgerBlue416 78 139#104E8BMediumOrchid4122 55 139#7A378BSteelBlue199 184 255#63B8FFDarkOrchid1191 62 255#BF3EFFSteelBlue292 172 238#5CACEEDarkOrchid2178 58 238#B23AEESteelBlue379 148 205#4F94CDDarkOrchid3154 50 205#9A32CDSteelBlue454 100 139#36648BDarkOrchid4104 34 139#68228BDeepSkyBlue10 191 255#00BFFFPurple1155 48 255#9B30FFDeepSkyBlue20 178 238#00B2EEPurple2145 44 238#912CEEDeepSkyBlue30 154 205#009ACDPurple3125 38 205#7D26CDDeepSkyBlue40 104 139#00688BPurple485 26 139#551A8BSkyBlue1135 206 255#87CEFFMediumPurple1171 130 255#AB82FFSkyBlue2126 192 238#7EC0EEMediumPurple2159 121 238#9F79EESkyBlue3108 166 205#6CA6CDMediumPurple3137 104 205#8968CDSkyBlue474 112 139#4A708BMediumPurple493 71 139#5D478BLightSkyBlue1176 226 255#B0E2FFThistle1255 225 255#FFE1FFLightSkyBlue2164 211 238#A4D3EEThistle2238 210 238#EED2EELightSkyBlue3141 182 205#8DB6CDThistle3205 181 205#CDB5CDLightSkyBlue496 123 139#607B8BThistle4139 123 139#8B7B8BSlateGray1198 226 255#C6E2FFgrey1128 28 28#1C1C1CSlateGray2185 211 238#B9D3EEgrey2154 54 54#363636SlateGray3159 182 205#9FB6CDgrey3179 79 79#4F4F4FSlateGray4108 123 139#6C7B8Bgrey41105 105 105#696969LightSteelBlue1202 225 255#CAE1FFgrey51130 130 130#828282LightSteelBlue2188 210 238#BCD2EEgrey61156 156 156#9C9C9CLightSteelBlue3162 181 205#A2B5CDgrey71181 181 181#B5B5B5LightSteelBlue4110 123 139#6E7B8Bgray81207 207 207#CFCFCFLightBlue1191 239 255#BFEFFFgray91232 232 232#E8E8E8LightBlue2178 223 238#B2DFEEDarkGrey169 169 169#A9A9A9LightBlue3154 192 205#9AC0CDDarkBlue0 0 139#00008BLightBlue4104 131 139#68838BDarkCyan0 139 139#008B8BLightCyan1224 255 255#E0FFFFDarkMagenta139 0 139#8B008BLightCyan2209 238 238#D1EEEEDarkRed139 0 0#8B0000LightCyan3180 205 205#B4CDCDLightCyan4122 139 139#7A8B8BLightGreen144 238 144#90EE90","tags":[{"name":"RGB","slug":"RGB","permalink":"https://blog.bidd.net/tags/RGB/"}]},{"title":"AJAX POST数据中有特殊符号导致数据丢失的解决方法","date":"2016-09-22T05:27:22.000Z","path":"2016/09/22/dcf0ab52342a/","text":"使用Ajax传送数据时，当数据中存在加号(+)、连接符(&amp;)或者百分号(%)时，服务器端接收数据时会丢失数据。分析Ajax传送数据的格式与Javascript的语法： “+”号：JavaScript解析为字符串连接符，所以服务器端接收数据时”+”会丢失变空格。 “&amp;”号：JavaScript解析为变量连接符，所以服务器端接收数据时&amp;符号以后的数据都会丢失变空格。解决方法是通过正则表达式进行编码替换(假设postStr是你想通过ajax传送的数据字符串) 123postStr = postStr.replace(/\\%/g, &quot;%25&quot;); postStr = postStr.replace(/\\&amp;/g, &quot;%26&quot;); postStr = postStr.replace(/\\+/g, &quot;%2B&quot;);","tags":[{"name":"Ajax","slug":"Ajax","permalink":"https://blog.bidd.net/tags/Ajax/"}]},{"title":"Android之Activity切换和数据传递","date":"2016-07-25T15:20:32.000Z","path":"2016/07/25/bdb9b15a5a4b/","text":"来源于网络，用以备忘 123456789101112131415161718192021Activity01中: button.setOnClickListener(new Button.OnClickListener() &#123; //更准确点应该是View.OnClickListener public void onClick(View v) &#123; /* 新建一个Intent对象 */ Intent intent = new Intent(); intent.putExtra(&quot;name&quot;,&quot;LeiPei&quot;); //若是文本框内容，转换String /* 指定intent要启动的类 */ intent.setClass(Activity01.this, Activity02.class); /* 启动一个新的Activity */ Activity01.this.startActivity(intent); /* 关闭当前的Activity */ Activity01.this.finish(); &#125; &#125;); Activity02中: Intent intent =getIntent(); String name=intent.getStringExtra(&quot;name&quot;); textview2.setText(&quot;activity01传过来的值为:&quot;+name);","tags":[{"name":"Android","slug":"Android","permalink":"https://blog.bidd.net/tags/Android/"},{"name":"Activity","slug":"Activity","permalink":"https://blog.bidd.net/tags/Activity/"}]},{"title":"BItmap和String互转","date":"2016-07-25T15:17:42.000Z","path":"2016/07/25/7a5d2c0771d3/","text":"来源于网络，用以备忘 12345678910//将Bitmap转为String，方便存储String imgstr=null;ByteArrayOutputStream outputStream=new ByteArrayOutputStream(); //压缩图片bm.compress(Bitmap.CompressFormat.PNG,80,outputStream);byte[] imagbyte=outputStream.toByteArray();imgstr=Base64.enpreToString(imagbyte, Base64.DEFAULT);//将String转为Bitmapbyte[] img= Base64.depre(jsonObject.get(&quot;musicImage&quot;).toString(),Base64.DEFAULT);Bitmap bm= BitmapFactory.depreByteArray(img,0,img.length);","tags":[{"name":"Bitmap","slug":"Bitmap","permalink":"https://blog.bidd.net/tags/Bitmap/"},{"name":"Java","slug":"Java","permalink":"https://blog.bidd.net/tags/Java/"}]},{"title":"Android SimpleAdapter传入Bitmap","date":"2016-07-25T15:13:00.000Z","path":"2016/07/25/bab7f01c8cd2/","text":"来源于网络，用以备忘 12345678910111213141516mySimpleAdapter = new SimpleAdapter( MainActivity.this, list, R.layout.musiclist, new String[]&#123;&quot;musicId&quot;, &quot;musicName&quot;, &quot;musicImage&quot;, &quot;musicPath&quot;&#125;, new int[]&#123;R.id.musicId, R.id.musicName, R.id.musicImage, R.id.path&#125;);//用于将Bitmap传入控件mySimpleAdapter.setViewBinder(new SimpleAdapter.ViewBinder() &#123; @Override public boolean setViewValue(View view, Object data, String textRepresentation) &#123; if (view instanceof ImageView &amp;&amp; data instanceof Bitmap) &#123; ImageView iv = (ImageView) view; iv.setImageBitmap((Bitmap) data); return true; &#125; else return false; &#125;&#125;);","tags":[{"name":"Android","slug":"Android","permalink":"https://blog.bidd.net/tags/Android/"},{"name":"SimpleAdapter","slug":"SimpleAdapter","permalink":"https://blog.bidd.net/tags/SimpleAdapter/"},{"name":"Bitmap","slug":"Bitmap","permalink":"https://blog.bidd.net/tags/Bitmap/"}]}]